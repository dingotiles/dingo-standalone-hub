// Code generated by go-bindata.
// sources:
// data/tutorial/docker-host-ip-docker-machine.txt
// data/tutorial/docker-host-ip-dockermac.txt
// data/tutorial/get-started.txt
// data/tutorial/show-usage.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTutorialDockerHostIpDockerMachineTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\x48\xc9\x4f\xce\x4e\x2d\xd2\xcd\x4d\x4c\xce\xc8\xcc\x4b\x55\xc8\x2c\x50\xf0\x73\xf4\x75\xd5\xe4\x02\x04\x00\x00\xff\xff\x5c\x7b\x25\xf8\x29\x00\x00\x00")

func dataTutorialDockerHostIpDockerMachineTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDockerHostIpDockerMachineTxt,
		"data/tutorial/docker-host-ip-docker-machine.txt",
	)
}

func dataTutorialDockerHostIpDockerMachineTxt() (*asset, error) {
	bytes, err := dataTutorialDockerHostIpDockerMachineTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker-host-ip-docker-machine.txt", size: 41, mode: os.FileMode(420), modTime: time.Unix(1477474104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDockerHostIpDockermacTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\xc8\x4c\x4b\xce\xcf\x4b\xcb\x4c\x57\xa8\x51\x48\x2f\x4a\x2d\x50\xc8\xcc\x4b\x2d\x81\xb1\x75\xcb\xc0\x5c\x33\x24\xbe\xa1\x91\xb9\x9e\x81\x9e\x81\x9e\xa1\x42\x8d\x42\x46\x6a\x62\x8a\x82\x6e\x1e\x88\x99\x58\x9e\xad\xa0\x5e\x5d\x50\x94\x99\x57\xa2\xa0\x62\x54\xab\xae\xc9\x05\x08\x00\x00\xff\xff\x54\xca\xb1\xfb\x69\x00\x00\x00")

func dataTutorialDockerHostIpDockermacTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDockerHostIpDockermacTxt,
		"data/tutorial/docker-host-ip-dockermac.txt",
	)
}

func dataTutorialDockerHostIpDockermacTxt() (*asset, error) {
	bytes, err := dataTutorialDockerHostIpDockermacTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker-host-ip-dockermac.txt", size: 105, mode: os.FileMode(420), modTime: time.Unix(1477474106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialGetStartedTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\xc1\xca\xc2\x30\x10\x84\xef\x79\x8a\xb9\xfd\x2d\xfc\x1a\x7c\x87\x1e\x3d\x28\x5e\x0b\x63\x69\x63\x0d\xd6\x44\x93\x56\x28\xec\xc3\xcb\xb6\x88\xb8\x0b\xc3\x32\xdf\xb0\x4c\x17\xdb\x9b\x4b\x48\x53\x40\xe7\x43\x1f\x47\x3f\xb8\x6c\x97\x73\xf3\x88\x79\xec\x93\xcb\xcf\xc1\x80\x24\x01\x1a\x01\x88\xba\x60\x49\xa8\xa1\xa2\x3e\x95\x7c\xf6\x8f\xa8\x61\xc1\x33\xc4\x6a\x5a\x11\xbf\x58\x50\x70\xd5\x12\x62\x44\x3f\x5b\xe1\x92\xa0\xd4\xe4\x3f\x54\x69\x0d\x7e\x47\x16\xd3\x54\xda\x0d\x87\xb5\xdb\xe9\xb8\x47\x1b\xc3\xe8\xc3\x14\xa7\x3c\xcc\x68\x52\x7b\xf5\x2f\xd7\xe1\x92\xe2\x1d\x55\x33\x63\xb7\x35\xef\x00\x00\x00\xff\xff\xb7\x8a\x0f\x63\xe5\x00\x00\x00")

func dataTutorialGetStartedTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialGetStartedTxt,
		"data/tutorial/get-started.txt",
	)
}

func dataTutorialGetStartedTxt() (*asset, error) {
	bytes, err := dataTutorialGetStartedTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/get-started.txt", size: 229, mode: os.FileMode(420), modTime: time.Unix(1477474348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialShowUsageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\x51\x6b\xdb\x30\x18\x7c\xd7\xaf\xb8\x87\xc0\x12\x98\xe6\xac\x5b\x5f\x02\x66\xb0\x24\xa4\x21\xa1\xf6\x1c\xe7\xcd\xf0\xcd\x93\x55\x57\xcc\xb1\x12\x59\xea\x56\xaa\xfe\xf7\x21\xb7\xdd\x9c\x6e\x4c\x82\x0f\x71\x77\xdf\xa7\xd3\xa9\xd2\xe2\xbb\x34\x30\xae\x45\xa5\xda\x5a\x5b\xd5\xc8\x2e\xea\x8f\xfc\xa8\x3b\x5b\x1b\xd9\x9d\x1a\x06\x22\x22\x80\x98\x07\x08\xc5\x98\x26\x84\x00\x84\x12\x70\x0a\xcc\xcb\x7e\x43\x28\x10\x81\xbe\xc2\x47\x41\x1d\x28\xfa\x43\x7b\x8c\xe9\xa9\x4e\xe0\x99\x0f\x93\x23\x4f\xbd\x82\x7c\x41\xf4\x16\xa1\x52\xc4\x70\xbe\x7c\x0f\xb2\x45\xf0\x86\xf4\xc9\xdb\xee\xcb\x16\x42\xb7\x56\xb5\x4e\xbb\xae\xb9\x47\x69\xc4\xad\xba\x93\x15\x6e\x8c\x3e\x60\x51\xde\xe3\xfd\x3b\xc6\xae\xf4\x0f\x58\x1d\x5e\x39\x63\x0c\x48\xf7\x9f\xb7\xeb\x39\xa5\x49\x96\xc7\x97\xd3\xe9\x94\x01\x83\x1c\x78\x85\xa2\xbf\x9b\xf3\xb6\x3c\x48\xbc\x0e\xe3\x85\x95\x58\x24\xf3\xcd\x32\xa3\xab\x64\x97\xd3\x3a\x8d\x47\x0f\xe7\xc0\xec\x93\x91\x27\xa7\x8c\xac\x1e\xff\xdd\x13\x0c\xd0\xe5\xc7\x0f\x17\xf1\xe8\x61\xe0\xe9\x11\xfc\x88\x73\x64\x16\x54\x83\x21\xeb\xeb\x55\x42\x49\xb6\xa2\x3c\xd9\x2c\xaf\xe3\xba\xd1\xdf\xca\x86\x6b\x53\xbf\xd6\xcc\xb7\xfb\x5d\xbe\xcc\xe2\x4a\x1e\x34\x17\x8d\xeb\xac\x34\x7c\xb5\xb9\xbd\xbb\x38\x3d\x4b\xff\xf3\xed\xb3\xa6\xb4\xb2\xb3\xbf\xf3\xab\xa5\x45\xa5\x8c\x14\x76\x98\xff\x3e\x5b\xf7\xa9\xc2\x19\x15\x8f\xc6\xcf\x49\xca\x9f\x52\xfc\x1d\x9d\x28\x2d\x22\xa1\xdb\x1b\x55\x47\xce\xa8\x49\x68\x3b\x06\x62\xe4\x8c\x62\xbf\x02\x00\x00\xff\xff\x55\xed\xe6\x22\x8d\x02\x00\x00")

func dataTutorialShowUsageTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialShowUsageTxt,
		"data/tutorial/show-usage.txt",
	)
}

func dataTutorialShowUsageTxt() (*asset, error) {
	bytes, err := dataTutorialShowUsageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/show-usage.txt", size: 653, mode: os.FileMode(420), modTime: time.Unix(1477474942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/tutorial/docker-host-ip-docker-machine.txt": dataTutorialDockerHostIpDockerMachineTxt,
	"data/tutorial/docker-host-ip-dockermac.txt": dataTutorialDockerHostIpDockermacTxt,
	"data/tutorial/get-started.txt": dataTutorialGetStartedTxt,
	"data/tutorial/show-usage.txt": dataTutorialShowUsageTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"tutorial": &bintree{nil, map[string]*bintree{
			"docker-host-ip-docker-machine.txt": &bintree{dataTutorialDockerHostIpDockerMachineTxt, map[string]*bintree{}},
			"docker-host-ip-dockermac.txt": &bintree{dataTutorialDockerHostIpDockermacTxt, map[string]*bintree{}},
			"get-started.txt": &bintree{dataTutorialGetStartedTxt, map[string]*bintree{}},
			"show-usage.txt": &bintree{dataTutorialShowUsageTxt, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

