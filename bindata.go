// Code generated by go-bindata.
// sources:
// data/tutorial/docker_host_ip_docker_machine
// data/tutorial/docker_host_ip_dockermac
// data/tutorial/docker_run_5000
// data/tutorial/get_started
// data/tutorial/insert_data
// data/tutorial/pg_switch_xlog
// data/tutorial/postgres_uri
// data/tutorial/recreate
// data/tutorial/recreate_logs
// data/tutorial/recreate_recovered_data
// data/tutorial/recreate_recovery_complete
// data/tutorial/show_usage
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTutorialDocker_host_ip_docker_machine = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\x48\xc9\x4f\xce\x4e\x2d\xd2\xcd\x4d\x4c\xce\xc8\xcc\x4b\x55\xc8\x2c\x50\xf0\x73\xf4\x75\xd5\xe4\x02\x04\x00\x00\xff\xff\x3b\x6b\x3a\x0e\x2b\x00\x00\x00")

func dataTutorialDocker_host_ip_docker_machineBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_host_ip_docker_machine,
		"data/tutorial/docker_host_ip_docker_machine",
	)
}

func dataTutorialDocker_host_ip_docker_machine() (*asset, error) {
	bytes, err := dataTutorialDocker_host_ip_docker_machineBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_host_ip_docker_machine", size: 43, mode: os.FileMode(420), modTime: time.Unix(1477516107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDocker_host_ip_dockermac = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\xc8\x4c\x4b\xce\xcf\x4b\xcb\x4c\x57\xa8\x51\x48\x2f\x4a\x2d\x50\xc8\xcc\x4b\x2d\x81\xb1\x75\xcb\xc0\x5c\x33\x24\xbe\xa1\x91\xb9\x9e\x81\x9e\x81\x9e\xa1\x42\x8d\x42\x46\x6a\x62\x8a\x82\x6e\x1e\x88\x99\x58\x9e\xad\xa0\x5e\x5d\x50\x94\x99\x57\xa2\xa0\x62\x54\xab\xae\xc9\x05\x08\x00\x00\xff\xff\x46\x83\xec\x58\x6b\x00\x00\x00")

func dataTutorialDocker_host_ip_dockermacBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_host_ip_dockermac,
		"data/tutorial/docker_host_ip_dockermac",
	)
}

func dataTutorialDocker_host_ip_dockermac() (*asset, error) {
	bytes, err := dataTutorialDocker_host_ip_dockermacBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_host_ip_dockermac", size: 107, mode: os.FileMode(420), modTime: time.Unix(1477516105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDocker_run_5000 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x5f\x6f\xda\x30\x14\xc5\xdf\xf3\x29\xae\xb2\xbe\x3a\x0d\x60\x06\x41\x62\x93\xca\x58\x87\x5a\x35\x08\xc2\xcb\x34\x29\xf2\x9f\x4b\x62\xd5\xd8\xd4\x76\xc6\x58\xd5\xef\x3e\x85\xae\x99\xe8\x78\xbd\xf7\x9e\x73\xcf\xf9\x7d\x00\x69\xc5\x23\x3a\x70\x8d\x01\x22\xe1\x47\x04\x40\x88\x61\x3b\x04\xa9\x4c\x65\xc9\xde\xfa\x50\x39\xf4\x4f\xfa\x75\x87\xf0\x25\x9f\xdd\xcd\x57\xe5\xb7\x7c\x5d\x94\x8b\xe5\xf4\xea\xf9\x7c\x30\xf9\xec\xf0\xa9\x51\x0e\xe5\xcb\x25\xc5\x32\x5f\x15\xe5\x90\x0e\xfa\xd3\xab\xe7\xe5\xe6\xe6\x7e\x31\x3b\x8d\x26\x64\x98\xa6\xe9\x0b\x90\x3d\x5c\x9a\x4f\x5a\x45\x67\xb7\x78\xb8\xcd\xcb\x7c\x75\x5b\x16\xf9\xdd\xfc\x61\x5a\x69\xcb\x99\x26\xd6\x55\xe7\x17\xb3\xfb\xcd\xba\x98\xaf\xa6\x12\x77\x96\x08\xdd\xf8\x80\x8e\xb0\x9b\xef\x03\x2a\x4e\x87\xa7\x82\x41\x69\xf4\xd7\xef\xbb\x46\x19\x95\xbd\xf1\x20\x15\x1f\x29\x4f\xfb\x83\x11\xa6\x22\xeb\xc9\x71\x9a\x66\x1c\x87\x94\xf7\x39\x15\x59\x4f\x8c\x7b\xdb\x01\xeb\x73\x4e\x47\xc3\x2c\x93\x54\xf6\x28\x1d\x21\x0a\xca\xe8\x30\x8a\x3a\xb2\xda\x56\xfe\x3f\x98\x51\x92\x24\xd1\x9e\x05\x67\x8d\xfa\x04\x45\x8d\xb0\x6d\x83\x00\x47\x6d\x4d\xa5\x4c\x05\xc1\x42\xa8\x95\x07\xc9\x02\xe3\xcc\x23\xf8\xa3\x0f\xb8\x83\x83\xd2\x1a\x38\x82\x3d\x18\x94\xc0\x8f\xd0\x78\x74\x10\xbf\x59\xc7\x67\xb6\xca\xbf\xae\x77\x8d\x0f\xc0\xb4\xb7\xad\x0c\x42\x8d\xe0\xd1\xfd\x44\x07\x7b\x67\x05\x7a\xff\x4f\x74\x1e\xaa\x7b\xfe\x17\x5f\xf7\x5d\x19\x15\x14\xd3\xea\x37\x4a\x38\xa8\x50\x83\xb6\x82\x69\x84\x18\x4d\xb9\x59\x27\x9b\xe2\x2b\x19\xc7\xef\x1a\x4a\xdc\xb2\x46\x07\x08\xf8\x2b\x80\x47\xe6\x44\x0d\xc2\x9a\xad\xaa\x1a\xc7\x82\xb2\xa6\x73\xf7\x18\xda\xfe\x31\x9a\x4a\x2b\x5f\xc7\x97\xe2\x09\x87\x2c\xb4\xa0\xa4\x72\x28\x82\x75\x47\xb8\x6e\xe3\x5e\xbf\x91\x48\x21\x49\x12\xb0\x8f\x27\xd4\x7f\x02\x00\x00\xff\xff\xe5\xf3\x6c\xe6\xe8\x02\x00\x00")

func dataTutorialDocker_run_5000Bytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_run_5000,
		"data/tutorial/docker_run_5000",
	)
}

func dataTutorialDocker_run_5000() (*asset, error) {
	bytes, err := dataTutorialDocker_run_5000Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_run_5000", size: 744, mode: os.FileMode(420), modTime: time.Unix(1477538566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialGet_started = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x41\xab\xc2\x30\x10\x84\xef\xf9\x15\x03\xef\xf0\x5a\x78\xcf\xe0\x7f\xe8\xd1\x83\xe2\xb5\x30\x96\x36\xd6\x60\x4d\x34\x69\x85\xc2\xfe\x78\xd9\x16\x11\x77\x61\x58\xe6\x1b\x96\xf9\x41\x17\xdb\xab\x4b\x48\x53\x40\xe7\x43\x1f\x47\x3f\xb8\x6c\x97\xf3\xff\x1e\xf3\xd8\x27\x97\x1f\x83\x01\x49\x02\x34\x02\x10\x75\xc1\x92\x50\x43\x45\x7d\x2a\x79\xef\x2f\x51\xc3\x82\x27\x88\xd5\xb4\x22\x7e\xb0\xa0\xe0\xaa\x25\xc4\x88\x7e\xb6\xc2\x25\x41\xa9\xc9\x3f\xa8\xd2\x1a\x7c\x8f\x2c\xa6\xa9\xb4\x1b\xf6\x6b\xb7\xe3\x61\x87\x36\x86\xd1\x87\x29\x4e\x79\x98\xd1\xa4\xf6\xe2\x9f\xae\xc3\x39\xc5\x1b\xaa\x66\xc6\x76\x63\x5e\x01\x00\x00\xff\xff\x0e\x5e\x12\x06\xe7\x00\x00\x00")

func dataTutorialGet_startedBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialGet_started,
		"data/tutorial/get_started",
	)
}

func dataTutorialGet_started() (*asset, error) {
	bytes, err := dataTutorialGet_startedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/get_started", size: 231, mode: os.FileMode(420), modTime: time.Unix(1477516098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialInsert_data = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x48\x2e\x4a\x4d\x2c\x49\x55\x28\x49\x4c\xca\x49\x55\x48\x49\xcd\xcd\x57\xd0\x28\x4b\xcc\x29\x4d\x55\x28\x49\xad\x28\xd1\xb4\xe6\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\xe5\x52\x56\xc8\xcc\x2b\x4e\x2d\x2a\x51\xc8\xcc\x2b\xc9\x87\xa8\x06\x2b\x2e\x56\xd0\x50\x2f\xca\x2f\x37\x54\xd7\xb4\xe6\xf2\xf4\x0b\x76\x0d\x0a\x51\x30\x50\x30\x24\xa4\xdc\x08\x43\x79\x71\x6a\x4e\x6a\x72\x89\x82\x96\x82\x5b\x90\xbf\x2f\x58\x83\x35\x17\x44\x0b\x97\x2e\x04\x70\x29\x80\xec\x01\x93\x46\x5c\x1a\x46\x20\xba\x58\x93\x0b\x10\x00\x00\xff\xff\xf0\x11\x04\xec\xc7\x00\x00\x00")

func dataTutorialInsert_dataBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialInsert_data,
		"data/tutorial/insert_data",
	)
}

func dataTutorialInsert_data() (*asset, error) {
	bytes, err := dataTutorialInsert_dataBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/insert_data", size: 199, mode: os.FileMode(420), modTime: time.Unix(1477538350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialPg_switch_xlog = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x28\x4e\xcd\x49\x4d\x2e\x51\x28\x48\x8f\x2f\x2e\xcf\x2c\x49\xce\x88\xaf\xc8\xc9\x4f\xd7\xd0\xb4\xe6\x42\x13\xe2\xd2\x45\x03\x5c\x0a\x06\xfa\x46\xa6\x06\x06\x06\x06\xe6\x16\x5c\x1a\x86\x0a\x45\xf9\xe5\x9a\x5c\x5c\xca\x0a\x31\x85\x5c\x80\x00\x00\x00\xff\xff\xdd\x74\xa8\x08\x56\x00\x00\x00")

func dataTutorialPg_switch_xlogBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialPg_switch_xlog,
		"data/tutorial/pg_switch_xlog",
	)
}

func dataTutorialPg_switch_xlog() (*asset, error) {
	bytes, err := dataTutorialPg_switch_xlogBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/pg_switch_xlog", size: 86, mode: os.FileMode(420), modTime: time.Unix(1477538355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialPostgres_uri = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x8f\x4d\xca\x83\x30\x10\x86\xf7\x39\xc5\x60\x5c\x28\x7c\x26\x2a\xc9\xe2\x13\x84\x1e\xa2\x17\x90\x38\xda\x50\x6b\xd2\x89\xe9\xcf\xed\x4b\x0a\xb6\xeb\x6e\x86\x77\x9e\x81\xe1\x79\x39\x8c\xce\x9c\x91\x00\x1f\x68\x60\xb4\xeb\xec\x2a\xef\xc2\x36\x13\x86\xeb\x02\x66\xd8\x40\x1a\xb7\x4e\x76\x96\x91\x2c\xdb\x4f\x9d\x94\x21\x7a\xa4\x18\x90\xaa\x34\xd6\xe1\x82\xdd\x17\xf9\x21\x84\xbb\xa3\xf1\xa0\x95\x68\x94\x16\xad\x6e\x44\xab\x74\xa7\xeb\xba\x96\xfb\x13\xc6\x38\x44\xb2\x7d\x5e\xfc\xe2\x50\x32\x0e\x3e\xf1\xfc\x2d\x94\x52\xf1\x2f\xb4\x68\xfe\x20\x20\xdd\x90\x20\x6d\xaa\x64\xc7\xa7\x47\xc8\x4e\xb8\xf8\x0c\x26\x47\x90\x92\x60\x9f\x0a\x3d\x67\xaf\x00\x00\x00\xff\xff\xaa\x96\xb4\xdc\xfd\x00\x00\x00")

func dataTutorialPostgres_uriBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialPostgres_uri,
		"data/tutorial/postgres_uri",
	)
}

func dataTutorialPostgres_uri() (*asset, error) {
	bytes, err := dataTutorialPostgres_uriBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/postgres_uri", size: 253, mode: os.FileMode(420), modTime: time.Unix(1477531445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x5f\x6b\xbb\x30\x14\x40\xdf\xfb\x29\x02\xbf\xbe\x86\x5f\xda\x18\xeb\x0a\x32\xa8\x93\x4e\x5a\x1a\xb1\xf6\x65\x0c\x24\x7f\xae\x22\x53\x63\xa3\x3e\x95\x7e\xf7\x51\x07\x65\xc5\x3e\xec\x2d\x9c\x9c\x73\xe1\xde\x7f\x48\x1b\xf5\x05\x16\x75\xbd\x69\x91\x2e\x9b\xc2\xe0\xd6\x74\x7d\x61\xa1\x3b\x57\xb3\x09\xb8\xfb\xb6\xfe\x83\xfd\x4b\x1f\x1a\x84\x35\xfa\x9c\x21\x84\x71\x23\x6a\x98\xd4\x3f\x7f\x80\xde\x78\xb0\x0b\x93\xec\x9d\x1f\xd3\x2c\x8a\xfd\xf9\xe5\x11\xac\x5f\x2d\x9c\x87\xd2\x82\xbe\x3e\x2b\x62\x9e\xa4\x19\x73\xe8\xd2\x9f\x5f\xe2\xd3\x66\x1f\x05\x23\x5a\x63\x46\x08\xb9\x22\xdc\xa2\x67\x7c\x7d\x2b\xee\xe3\xa2\xc3\x96\x67\x3c\xd9\x66\x29\xdf\x85\x07\xbf\xa8\x8c\x14\x15\x36\xb6\x78\x34\x82\xfd\xe9\x98\x86\x89\xaf\xa1\x36\x58\x55\x43\xd7\x83\xc5\x62\xf3\x41\x1d\x35\x8a\xe3\x82\x7d\x59\x41\xf7\x7f\x72\x18\xb9\xd0\x2e\xd3\x1e\x68\x25\x14\x95\x8e\xa7\x98\xcb\x48\x4e\x24\x78\x2f\x2c\x57\x4b\x8f\xb8\x52\xe4\x34\xd7\xee\x82\x52\x47\xaf\x58\x4e\x18\xb9\x3d\x16\x12\xdc\xa5\x58\xa9\xd9\x77\x00\x00\x00\xff\xff\x9e\x2f\xbd\x46\xb8\x01\x00\x00")

func dataTutorialRecreateBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate,
		"data/tutorial/recreate",
	)
}

func dataTutorialRecreate() (*asset, error) {
	bytes, err := dataTutorialRecreateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate", size: 440, mode: os.FileMode(420), modTime: time.Unix(1477538584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_logs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x94\x4d\x6f\xd3\x4e\x10\xc6\xef\xfd\x14\x23\xfd\xcf\x7e\x89\xfd\x6f\xd2\x58\x32\x52\xa0\x2d\x44\x2a\x05\xa5\xce\x85\x4b\x35\xf6\x4e\xec\x25\xeb\x1d\xb3\x3b\x6e\x48\x3f\x3d\xb2\xd3\x52\x4a\x79\x13\x12\x1c\x18\xc9\x27\xdb\x33\xcf\xfe\x9e\x67\xf6\x3f\x50\x5c\x6d\xc9\x81\xe1\xda\x83\xd2\xb6\xe6\xa0\x63\x2f\xb5\x23\xff\xc1\x40\xb0\x39\x0a\xc3\xf0\xa8\x43\x71\x6c\xf5\x33\x38\x5f\x14\x8b\x8b\x0c\x40\x1a\x02\x85\x82\x25\x7a\x02\xbf\xf7\x42\x2d\x68\x0f\x5e\xd0\x89\xb6\x35\xf4\xdd\x5f\xfb\x67\xd0\xf7\x58\xe4\x7d\x5d\x15\xab\xf5\x8b\x62\xbd\x3a\x3b\xcd\x40\x74\x4b\x79\x12\x4f\xa6\xc1\x24\x0e\x92\x59\x11\xa7\x59\x72\x9c\xc5\xd3\x70\x7e\x72\x3c\x49\xe7\x41\x1c\x43\xa7\x55\x3e\x4d\xe3\x14\xb0\x12\xcd\x36\xdf\xa1\x09\x36\x24\x55\x03\x5b\xda\xe7\x3e\xcd\xa2\xe8\xc0\x07\x3b\x1d\x28\xba\x09\x94\xb3\xba\x8a\x4a\xac\xb6\x7d\xe7\x23\x45\x2d\x07\x95\xe9\xbd\x90\x0b\xf0\xf9\xbb\xf4\xff\x2a\xda\xa1\x19\x9e\xeb\x38\x3e\x8e\xe2\x43\x4d\xe2\x47\x95\x4c\x43\x73\xcb\xd0\x39\xda\xe8\x8f\xf9\xcf\x7a\x81\xa7\x3a\xff\x5e\xa3\x81\x8a\x50\x5e\x52\xad\xed\x03\x0c\x73\xcb\x5d\x06\xbe\x61\x27\xe0\x08\xd5\xc3\x9b\x41\x18\x85\xa5\xe1\xd2\x0b\x3b\x0a\x7d\x1a\xfa\xf4\xba\x17\x6d\x60\x79\x79\xfe\x66\x44\xf8\xfa\xea\x65\x06\x15\xf7\x46\x81\x65\x30\x6c\xeb\x31\x2a\x15\x0a\x01\x97\xef\xa9\x12\xd8\x35\xda\x10\x74\xe4\x36\xec\xda\xc1\x93\x1d\x1a\x70\x34\xf6\x7c\xea\xc9\xe9\x59\xb1\x58\x5e\x64\x50\x34\x04\x58\x7a\x36\xbd\x10\xac\x57\x4b\x90\x06\xe5\xf3\x24\x81\x92\xee\xc6\xa8\xd1\xef\x3f\x09\xff\x1b\xc9\x79\xb5\xbc\x2c\x06\x8d\xda\x43\x85\x76\x10\x63\xd9\xb5\x68\x60\xd7\x90\x85\xb7\x77\xfb\x31\x28\x13\xb7\x1f\xce\x2c\x0c\x8a\xe4\x80\x03\x65\x4c\x9b\xd1\x96\x3c\xa0\x23\xc0\x1b\xd4\x06\x4b\x43\xa0\x7a\x37\x7c\x7d\xa0\x83\x43\xca\x7e\x2f\xb6\xb3\x30\x49\x4e\x92\xc9\xec\xcb\xd8\x7e\x6d\x2c\x77\xe4\x50\xd8\x85\x07\x46\x4f\x3c\x6d\x3b\x43\x42\x3f\x76\xeb\x17\xa5\xcc\xe7\xd3\x7f\x69\x83\xee\xd9\x8c\xb7\xca\xa7\x00\x00\x00\xff\xff\x26\xf8\x81\xdc\x21\x05\x00\x00")

func dataTutorialRecreate_logsBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_logs,
		"data/tutorial/recreate_logs",
	)
}

func dataTutorialRecreate_logs() (*asset, error) {
	bytes, err := dataTutorialRecreate_logsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_logs", size: 1313, mode: os.FileMode(420), modTime: time.Unix(1477539107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_recovered_data = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x28\x28\x2e\xcc\x51\x50\x29\x2d\xca\x54\xd0\x4d\x56\x50\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\x52\x70\x0b\xf2\xf7\x55\x48\x49\xcd\xcd\xb7\x56\xe2\x52\x28\x4b\xcc\x29\x4d\xe5\xd2\x85\x00\x2e\x85\xa2\xfc\x72\x43\x30\x69\xc4\xa5\x61\x04\xa2\x8b\x35\xb9\x00\x01\x00\x00\xff\xff\x1d\xfe\x7c\x59\x49\x00\x00\x00")

func dataTutorialRecreate_recovered_dataBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_recovered_data,
		"data/tutorial/recreate_recovered_data",
	)
}

func dataTutorialRecreate_recovered_data() (*asset, error) {
	bytes, err := dataTutorialRecreate_recovered_dataBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_recovered_data", size: 73, mode: os.FileMode(420), modTime: time.Unix(1477538916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_recovery_complete = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcc\x41\xaa\xc2\x30\x14\x46\xe1\x79\x57\xf1\xc3\x9b\xbe\x84\xa4\x85\x14\x23\x38\x14\x0a\xa2\x6b\x08\xe9\xb5\x0d\x8d\xb9\x35\x09\x74\xfb\x22\x16\xa7\x0e\xcf\xe0\x7c\x7f\x18\xd9\x2f\x94\x11\x79\x2a\x18\x43\x9a\x58\xac\x5c\xea\x94\xa9\x3c\x23\xc4\xbd\x91\x52\x36\xab\xab\x99\x53\x38\xa1\x55\xda\x08\xad\x44\xdb\x43\x75\xb6\x35\x56\xab\x7f\x63\x0e\x18\xae\xe7\x9b\xc5\x85\xfd\x02\xde\x12\x65\x8b\x7d\xd1\x47\x0c\x70\x8f\x6f\xfe\xa0\xfa\x6e\xa7\x12\xc3\xf9\x1a\x38\x49\x20\xbc\x81\x3a\x13\x22\xb9\x91\x32\xb6\x50\xe7\x4f\xb3\x5f\x9a\x57\x00\x00\x00\xff\xff\xe6\xf1\x8a\x3b\xc2\x00\x00\x00")

func dataTutorialRecreate_recovery_completeBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_recovery_complete,
		"data/tutorial/recreate_recovery_complete",
	)
}

func dataTutorialRecreate_recovery_complete() (*asset, error) {
	bytes, err := dataTutorialRecreate_recovery_completeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_recovery_complete", size: 194, mode: os.FileMode(420), modTime: time.Unix(1477538908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialShow_usage = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\x61\x6b\xdb\x30\x14\xfc\xae\x5f\x71\xb0\xc0\x12\x98\xe6\xac\x5b\xbf\x04\xcc\x60\x49\x48\x43\x42\x9d\x39\xce\x37\xc3\x9b\x27\xab\xae\x98\x63\x25\xb2\xd4\xad\x54\xfd\xef\x43\x6e\xbb\x39\xd9\xa8\x04\x0f\x71\x77\xef\xe9\x74\x7a\x83\x52\x8b\x1f\xd2\xc0\xb8\x06\xa5\x6a\x2a\x6d\x55\x2d\xdb\xa8\x3b\xf2\x83\x6e\x6d\x65\x64\x7b\xac\x19\x88\x88\x00\x62\x1e\x20\xe4\x43\x1a\x11\x02\x10\x4a\xc0\x29\x30\x2f\xfb\x2d\x21\x47\x04\xfa\x06\x1f\x05\x75\xa0\xe8\x2f\xed\x31\xa4\xa7\x3a\x82\x67\x3e\x4c\x8e\x3c\x75\x0a\xf2\x39\xd1\x3b\x84\x4a\x11\xc3\xe9\xf2\x1d\xc8\x66\xc1\x1b\x36\x4f\xde\xb6\x5f\xd7\x10\xba\xb1\xaa\x71\xda\xb5\xf5\x3d\x0a\x23\x6e\xd5\x9d\x2c\x71\x63\xf4\x1e\xb3\xe2\x1e\x1f\xde\x33\x76\xa5\x7f\xc2\xea\xf0\xca\x09\x63\xc0\x66\xf7\x65\xbd\x9c\xd2\x26\x49\xb3\xf8\x72\x3c\x1e\x33\xf4\x73\xe0\x25\xf2\xee\x6e\xce\x9b\x62\x2f\x71\x1e\xc6\x0b\x2b\x31\x4b\xa6\xab\x79\x4a\x57\xc9\x36\xa3\xe5\x26\x1e\x3c\x9c\x02\x93\xcf\x46\x1e\x9d\x32\xb2\x7c\xfc\x7f\x4f\x30\x40\x97\x9f\x3e\x5e\xc4\x83\x87\x9e\xa7\x47\xf0\x03\x4e\x91\x49\x50\xf5\x86\x2c\xaf\x17\x09\x25\xe9\x82\xb2\x64\x35\xbf\x8e\xab\x5a\x7f\x2f\x6a\xae\x4d\x75\xae\x99\xae\x77\xdb\x6c\x9e\xc6\xa5\xdc\x6b\x2e\x6a\xd7\x5a\x69\xf8\x62\x75\x7b\x77\x71\x7c\x96\xbe\xf2\xed\x93\xba\xb0\xb2\xb5\x7f\xf2\xab\xa4\x45\xa9\x8c\x14\xb6\x9f\xff\x2e\x5d\x76\xa9\xc2\x19\x15\x0f\x86\xcf\x49\xca\x5f\x52\xfc\x1b\x9d\x28\x2c\x22\xa1\x9b\x1b\x55\x45\xce\xa8\x51\x68\x3b\x04\x62\xe0\x8c\x62\xbf\x03\x00\x00\xff\xff\x70\x7b\xae\xe4\x8f\x02\x00\x00")

func dataTutorialShow_usageBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialShow_usage,
		"data/tutorial/show_usage",
	)
}

func dataTutorialShow_usage() (*asset, error) {
	bytes, err := dataTutorialShow_usageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/show_usage", size: 655, mode: os.FileMode(420), modTime: time.Unix(1477516100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/tutorial/docker_host_ip_docker_machine": dataTutorialDocker_host_ip_docker_machine,
	"data/tutorial/docker_host_ip_dockermac": dataTutorialDocker_host_ip_dockermac,
	"data/tutorial/docker_run_5000": dataTutorialDocker_run_5000,
	"data/tutorial/get_started": dataTutorialGet_started,
	"data/tutorial/insert_data": dataTutorialInsert_data,
	"data/tutorial/pg_switch_xlog": dataTutorialPg_switch_xlog,
	"data/tutorial/postgres_uri": dataTutorialPostgres_uri,
	"data/tutorial/recreate": dataTutorialRecreate,
	"data/tutorial/recreate_logs": dataTutorialRecreate_logs,
	"data/tutorial/recreate_recovered_data": dataTutorialRecreate_recovered_data,
	"data/tutorial/recreate_recovery_complete": dataTutorialRecreate_recovery_complete,
	"data/tutorial/show_usage": dataTutorialShow_usage,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"tutorial": &bintree{nil, map[string]*bintree{
			"docker_host_ip_docker_machine": &bintree{dataTutorialDocker_host_ip_docker_machine, map[string]*bintree{}},
			"docker_host_ip_dockermac": &bintree{dataTutorialDocker_host_ip_dockermac, map[string]*bintree{}},
			"docker_run_5000": &bintree{dataTutorialDocker_run_5000, map[string]*bintree{}},
			"get_started": &bintree{dataTutorialGet_started, map[string]*bintree{}},
			"insert_data": &bintree{dataTutorialInsert_data, map[string]*bintree{}},
			"pg_switch_xlog": &bintree{dataTutorialPg_switch_xlog, map[string]*bintree{}},
			"postgres_uri": &bintree{dataTutorialPostgres_uri, map[string]*bintree{}},
			"recreate": &bintree{dataTutorialRecreate, map[string]*bintree{}},
			"recreate_logs": &bintree{dataTutorialRecreate_logs, map[string]*bintree{}},
			"recreate_recovered_data": &bintree{dataTutorialRecreate_recovered_data, map[string]*bintree{}},
			"recreate_recovery_complete": &bintree{dataTutorialRecreate_recovery_complete, map[string]*bintree{}},
			"show_usage": &bintree{dataTutorialShow_usage, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

