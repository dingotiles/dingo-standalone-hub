// Code generated by go-bindata.
// sources:
// data/tutorial/docker_host_ip_docker_machine
// data/tutorial/docker_host_ip_dockermac
// data/tutorial/docker_run_5000
// data/tutorial/get_started
// data/tutorial/insert_data
// data/tutorial/pg_switch_xlog
// data/tutorial/postgres_uri
// data/tutorial/recreate
// data/tutorial/recreate_logs
// data/tutorial/recreate_recovered_data
// data/tutorial/recreate_recovery_complete
// data/tutorial/show_usage
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTutorialDocker_host_ip_docker_machine = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\x48\xc9\x4f\xce\x4e\x2d\xd2\xcd\x4d\x4c\xce\xc8\xcc\x4b\x55\xc8\x2c\x50\xf0\x73\xf4\x75\xd5\xe4\x02\x04\x00\x00\xff\xff\x3b\x6b\x3a\x0e\x2b\x00\x00\x00")

func dataTutorialDocker_host_ip_docker_machineBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_host_ip_docker_machine,
		"data/tutorial/docker_host_ip_docker_machine",
	)
}

func dataTutorialDocker_host_ip_docker_machine() (*asset, error) {
	bytes, err := dataTutorialDocker_host_ip_docker_machineBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_host_ip_docker_machine", size: 43, mode: os.FileMode(420), modTime: time.Unix(1477516107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDocker_host_ip_dockermac = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\xc8\x4c\x4b\xce\xcf\x4b\xcb\x4c\x57\xa8\x51\x48\x2f\x4a\x2d\x50\xc8\xcc\x4b\x2d\x81\xb1\x75\xcb\xc0\x5c\x33\x24\xbe\xa1\x91\xb9\x9e\x81\x9e\x81\x9e\xa1\x42\x8d\x42\x46\x6a\x62\x8a\x82\x6e\x1e\x88\x99\x58\x9e\xad\xa0\x5e\x5d\x50\x94\x99\x57\xa2\xa0\x62\x54\xab\xae\xc9\x05\x08\x00\x00\xff\xff\x46\x83\xec\x58\x6b\x00\x00\x00")

func dataTutorialDocker_host_ip_dockermacBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_host_ip_dockermac,
		"data/tutorial/docker_host_ip_dockermac",
	)
}

func dataTutorialDocker_host_ip_dockermac() (*asset, error) {
	bytes, err := dataTutorialDocker_host_ip_dockermacBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_host_ip_dockermac", size: 107, mode: os.FileMode(420), modTime: time.Unix(1477516105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDocker_run_5000 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x4f\x6f\xda\x40\x10\xc5\xef\xfe\x14\x23\x37\x87\xf6\xb0\xc6\x80\x29\x18\x89\x56\x2d\x4d\x5b\xd4\x28\x20\x30\xb7\x4a\x68\xff\x0c\xf6\x2a\xeb\x5d\xb2\x3b\x2e\xa5\x51\xbe\x7b\x65\x92\x50\x91\x72\xb3\x66\xfc\xde\xbc\xf7\xdb\x37\xa0\x9c\xbc\x43\x0f\xbe\xb1\xc0\x14\xfc\x8c\x00\x18\xb3\xbc\x46\x50\xda\x96\x8e\xed\x5c\xa0\xd2\x63\xb8\x37\x4f\x3b\x84\x2f\xf3\xe9\x8f\xeb\xe5\xe6\xfb\x7c\x55\x6c\x66\x8b\xc9\xd5\xc3\xf9\x60\xfc\xd1\xe3\x7d\xa3\x3d\xaa\xc7\x4b\x8a\xc5\x7c\x59\x6c\x06\x59\xbf\x37\xb9\x7a\x58\xac\x3f\xdf\xcc\xa6\xc7\xd1\x98\x0d\xd2\x34\x7d\x04\xb6\x83\x4b\xf3\x71\xab\x38\xd9\xcd\x6e\xbf\xcd\x37\x9f\xa6\xd3\xf9\xfa\xb6\x98\x5c\xbd\x2d\x35\x81\x74\x76\xab\x4b\x60\xac\x34\x4e\x70\xd3\x7e\x20\x41\x13\xd0\x27\x58\x73\x6d\xde\x9d\x8b\xa7\x37\xeb\x55\x71\xbd\x9c\x28\xac\x1d\x93\xa6\x09\x84\x9e\x79\xdc\x19\x2e\xb1\xc6\xe3\xbf\xc7\xfa\xa4\x0d\x86\xce\x6b\x12\x51\x9e\xa9\xee\xa8\x9f\xca\xf7\x99\x48\x7b\xfd\x21\xa6\x32\xef\xaa\x51\x9a\xe6\x02\x07\x99\xe8\x89\x4c\xe6\x5d\x39\xea\x6e\xfb\xbc\x27\x44\x36\x1c\xe4\xb9\xca\x54\x37\xcb\x86\x88\x32\xe3\xd9\x20\x8a\x4e\xdc\x8d\x2b\xc3\xff\xa8\xd9\x36\x4a\x92\x24\xda\x71\xf2\xce\xea\x0f\x50\x54\x08\xdb\x36\x0b\x08\x34\xce\x96\xda\x96\x40\x0e\xa8\xd2\x01\x14\x27\x2e\x78\x40\x08\x87\x40\x58\xc3\x5e\x1b\x03\x02\xc1\xed\x2d\x2a\x10\x87\x23\x05\x88\x5f\xdc\xe3\x33\x5b\x1d\x9e\xd6\x75\x13\x08\xb8\x09\xae\x95\x01\x55\x08\x01\xfd\x2f\xf4\xb0\xf3\x4e\x62\x08\xff\x44\xe7\xa1\x4e\xc7\x9f\x21\x9e\xae\x6b\xab\x49\x73\xa3\xff\xa0\x82\xbd\xa6\x0a\x8c\x93\xdc\x20\xc4\x68\x37\xeb\x55\xb2\x2e\xbe\xb2\x51\xfc\xaa\xa1\xc2\x2d\x6f\x0c\x01\xe1\x6f\x82\x80\xdc\xcb\xea\xf9\x61\x1b\xcf\x49\x3b\x7b\x72\x0f\x48\x6d\xff\x18\x6d\x69\x74\xa8\xe2\x4b\xf1\xa4\x47\x4e\x2d\x28\xa5\x3d\x4a\x72\xfe\x00\x9d\x36\x6e\xe7\x85\x44\x0a\x49\x92\x80\xbb\x3b\xa2\xfe\x1b\x00\x00\xff\xff\xb7\x4a\x39\x4a\x09\x03\x00\x00")

func dataTutorialDocker_run_5000Bytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_run_5000,
		"data/tutorial/docker_run_5000",
	)
}

func dataTutorialDocker_run_5000() (*asset, error) {
	bytes, err := dataTutorialDocker_run_5000Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_run_5000", size: 777, mode: os.FileMode(420), modTime: time.Unix(1487139983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialGet_started = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x41\xab\xc2\x30\x10\x84\xef\xf9\x15\x03\xef\xf0\x5a\x78\xcf\xe0\x7f\xe8\xd1\x83\xe2\xb5\x30\x96\x36\xd6\x60\x4d\x34\x69\x85\xc2\xfe\x78\xd9\x16\x11\x77\x61\x58\xe6\x1b\x96\xf9\x41\x17\xdb\xab\x4b\x48\x53\x40\xe7\x43\x1f\x47\x3f\xb8\x6c\x97\xf3\xff\x1e\xf3\xd8\x27\x97\x1f\x83\x01\x49\x02\x34\x02\x10\x75\xc1\x92\x50\x43\x45\x7d\x2a\x79\xef\x2f\x51\xc3\x82\x27\x88\xd5\xb4\x22\x7e\xb0\xa0\xe0\xaa\x25\xc4\x88\x7e\xb6\xc2\x25\x41\xa9\xc9\x3f\xa8\xd2\x1a\x7c\x8f\x2c\xa6\xa9\xb4\x1b\xf6\x6b\xb7\xe3\x61\x87\x36\x86\xd1\x87\x29\x4e\x79\x98\xd1\xa4\xf6\xe2\x9f\xae\xc3\x39\xc5\x1b\xaa\x66\xc6\x76\x63\x5e\x01\x00\x00\xff\xff\x0e\x5e\x12\x06\xe7\x00\x00\x00")

func dataTutorialGet_startedBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialGet_started,
		"data/tutorial/get_started",
	)
}

func dataTutorialGet_started() (*asset, error) {
	bytes, err := dataTutorialGet_startedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/get_started", size: 231, mode: os.FileMode(420), modTime: time.Unix(1477516098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialInsert_data = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x48\x2e\x4a\x4d\x2c\x49\x55\x28\x49\x4c\xca\x49\x55\x48\x49\xcd\xcd\x57\xd0\x28\x4b\xcc\x29\x4d\x55\x28\x49\xad\x28\xd1\xb4\xe6\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\xe5\x52\x56\xc8\xcc\x2b\x4e\x2d\x2a\x51\xc8\xcc\x2b\xc9\x87\xa8\x06\x2b\x2e\x56\xd0\x50\x2f\xca\x2f\x37\x54\xd7\xb4\xe6\xf2\xf4\x0b\x76\x0d\x0a\x51\x30\x50\x30\x24\xa4\xdc\x08\x43\x79\x71\x6a\x4e\x6a\x72\x89\x82\x96\x82\x5b\x90\xbf\x2f\x58\x83\x35\x17\x44\x0b\x97\x2e\x04\x70\x29\x80\xec\x01\x93\x46\x5c\x1a\x46\x20\xba\x58\x93\x0b\x10\x00\x00\xff\xff\xf0\x11\x04\xec\xc7\x00\x00\x00")

func dataTutorialInsert_dataBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialInsert_data,
		"data/tutorial/insert_data",
	)
}

func dataTutorialInsert_data() (*asset, error) {
	bytes, err := dataTutorialInsert_dataBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/insert_data", size: 199, mode: os.FileMode(420), modTime: time.Unix(1477538350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialPg_switch_xlog = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x28\x4e\xcd\x49\x4d\x2e\x51\x28\x48\x8f\x2f\x2e\xcf\x2c\x49\xce\x88\xaf\xc8\xc9\x4f\xd7\xd0\xb4\xe6\x42\x13\xe2\xd2\x45\x03\x5c\x0a\x06\xfa\x46\xa6\x06\x06\x06\x06\xe6\x16\x5c\x1a\x86\x0a\x45\xf9\xe5\x9a\x5c\x5c\xca\x0a\x31\x85\x5c\x80\x00\x00\x00\xff\xff\xdd\x74\xa8\x08\x56\x00\x00\x00")

func dataTutorialPg_switch_xlogBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialPg_switch_xlog,
		"data/tutorial/pg_switch_xlog",
	)
}

func dataTutorialPg_switch_xlog() (*asset, error) {
	bytes, err := dataTutorialPg_switch_xlogBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/pg_switch_xlog", size: 86, mode: os.FileMode(420), modTime: time.Unix(1477538355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialPostgres_uri = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x8f\x4d\xca\x83\x30\x10\x86\xf7\x39\xc5\x60\x5c\x28\x7c\x26\x2a\xc9\xe2\x13\x84\x1e\xa2\x17\x90\x38\xda\x50\x6b\xd2\x89\xe9\xcf\xed\x4b\x0a\xb6\xeb\x6e\x86\x77\x9e\x81\xe1\x79\x39\x8c\xce\x9c\x91\x00\x1f\x68\x60\xb4\xeb\xec\x2a\xef\xc2\x36\x13\x86\xeb\x02\x66\xd8\x40\x1a\xb7\x4e\x76\x96\x91\x2c\xdb\x4f\x9d\x94\x21\x7a\xa4\x18\x90\xaa\x34\xd6\xe1\x82\xdd\x17\xf9\x21\x84\xbb\xa3\xf1\xa0\x95\x68\x94\x16\xad\x6e\x44\xab\x74\xa7\xeb\xba\x96\xfb\x13\xc6\x38\x44\xb2\x7d\x5e\xfc\xe2\x50\x32\x0e\x3e\xf1\xfc\x2d\x94\x52\xf1\x2f\xb4\x68\xfe\x20\x20\xdd\x90\x20\x6d\xaa\x64\xc7\xa7\x47\xc8\x4e\xb8\xf8\x0c\x26\x47\x90\x92\x60\x9f\x0a\x3d\x67\xaf\x00\x00\x00\xff\xff\xaa\x96\xb4\xdc\xfd\x00\x00\x00")

func dataTutorialPostgres_uriBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialPostgres_uri,
		"data/tutorial/postgres_uri",
	)
}

func dataTutorialPostgres_uri() (*asset, error) {
	bytes, err := dataTutorialPostgres_uriBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/postgres_uri", size: 253, mode: os.FileMode(420), modTime: time.Unix(1477531445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x41\x6b\xf2\x30\x1c\x87\xef\x7e\x8a\x3f\xbc\x1e\xde\x1d\xb2\x45\x6b\x6a\x27\x94\xb1\x75\xb2\xc9\xc4\x8a\xd6\xdb\xa0\xa4\xc9\xbf\x25\x2c\x6d\x6a\x92\x9e\xc4\xef\x3e\x74\x20\x93\x7a\xd8\xed\xc7\x93\xe7\x09\x24\xff\x40\x1a\xf1\x85\x16\x9c\x37\x2d\x48\xd5\x54\x86\xb4\xc6\xf9\xca\xa2\xdb\xeb\x41\x0f\x5c\x7c\x5b\xff\xc1\xfe\xa5\x77\x0d\x10\x09\x9f\x03\x00\x42\x1a\x5e\x63\xaf\xfe\x39\x43\x78\x4d\x93\x8f\xf9\x26\x7f\x4f\xb7\x59\xbe\x58\xc7\xc3\xc3\x35\x98\x3d\x59\xdc\x77\xca\xa2\x3c\xde\x2a\xd6\xe9\x26\xcb\xd9\x24\x18\xc7\xc3\xc3\x7a\xf7\xb2\x5c\x24\x67\x34\x23\x8c\x52\x7a\x04\xd2\xc2\x2d\x3e\x3b\x15\x97\xeb\x16\xab\xb7\x34\x7f\x4e\x92\x74\xb7\xca\xe2\xe1\xff\x4a\x79\x10\xa6\x29\x55\x05\x84\x54\xda\x14\x5c\x9f\x06\x7a\xe8\x1c\xda\x7b\xac\xb9\xd2\x77\xd7\x71\xb2\xdc\x6d\xb3\xf9\x26\x96\x58\x1b\x22\x74\xe7\x3c\x5a\x62\xb1\xd5\x5c\x60\x8d\x67\xf7\xfc\x7c\xaf\x34\xba\x87\xde\xb7\x15\x23\x19\x32\x19\xa1\x14\x5c\x04\xc5\x24\x12\x2c\x64\xb4\xa4\x05\x46\x8f\xac\x14\xe3\x88\x86\x05\x2f\x83\x52\x86\xa3\x20\x98\xc8\x29\x2b\x29\xa3\xa7\x31\x2a\x30\x1c\xf3\xa9\x18\x7c\x07\x00\x00\xff\xff\xe1\xfd\x28\x71\xd6\x01\x00\x00")

func dataTutorialRecreateBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate,
		"data/tutorial/recreate",
	)
}

func dataTutorialRecreate() (*asset, error) {
	bytes, err := dataTutorialRecreateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate", size: 470, mode: os.FileMode(420), modTime: time.Unix(1487140001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_logs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x94\x4f\x6f\xd3\x40\x10\xc5\xef\xfd\x14\x23\x71\xf6\x9f\xd8\x4a\xd2\x58\x32\x52\x44\x5b\x88\x54\x0a\x4a\x9d\x73\x35\xf6\x4e\xec\x25\xeb\xdd\x65\x77\xdc\x90\x7e\x7a\xb4\x4e\x4b\x29\x05\x54\x21\xc1\x81\x91\x7c\xb2\x3d\xf3\xf6\xf7\xde\xec\x2b\x10\xa6\xd9\x91\x03\x65\x5a\x0f\x42\xea\xd6\x44\xd6\x78\x6e\x1d\xf9\xcf\x0a\xa2\xed\x49\x1c\xc7\x27\x16\xd9\x19\x2d\x5f\xc3\xc5\xb2\x5a\x5e\x16\x00\xdc\x11\x08\x64\xac\xd1\x13\xf8\x83\x67\xea\x41\x7a\xf0\x8c\x8e\xa5\x6e\x61\xb0\xff\xec\x9f\xa0\xef\xa9\xc8\x87\xba\xae\xd6\x9b\x37\xd5\x66\x7d\x7e\x56\x00\xcb\x9e\xca\x2c\x9d\xcc\xa2\x49\x1a\x65\xf3\x2a\xcd\x8b\x6c\x5a\xa4\xb3\x78\x71\x3a\x9d\xe4\x8b\x28\x4d\xc1\x4a\x51\xce\xf2\x34\x07\x6c\x58\x1a\x5d\xee\x51\x45\x5b\xe2\xa6\x83\x1d\x1d\x4a\x9f\x17\x49\x72\xe4\x83\x56\x46\x82\x6e\x23\xe1\xb4\x6c\x92\x1a\x9b\xdd\x60\x7d\x22\xa8\x37\x51\xa3\x06\xcf\xe4\x22\x47\x56\x61\x43\x3d\x25\x7b\x54\xe1\xb9\x49\xd3\x69\x92\x1e\x6b\x92\x3e\xa9\x6c\x16\xab\x3b\x03\xd6\xd1\x56\x7e\x29\x5f\xd0\x0e\x3c\xb5\xe5\xaf\x7a\x05\x36\x4c\x65\x4d\xad\xd4\x8f\x48\xd4\x9d\xb1\x05\xf8\xce\x38\x06\x47\x28\x1e\xdf\x04\x6d\x14\xd7\xca\xd4\x9e\x8d\xa3\xd8\xe7\xb1\xcf\x6f\x06\x96\x0a\x56\x57\x17\x1f\x46\x90\xef\xaf\xdf\x16\xd0\x98\x41\x09\xd0\x06\x94\xd1\xed\x18\x98\x06\x99\xc0\xd4\x9f\xa8\x61\xd8\x77\x52\x11\x58\x72\x5b\xe3\xfa\xe0\xcc\x1e\x15\x38\x1a\x7b\x3e\x77\xe6\xec\xbc\x5a\xae\x2e\x0b\xa8\x3a\x02\xac\xbd\x51\x03\x13\x6c\xd6\x2b\xe0\x0e\xf9\xdb\x24\x86\x9a\xee\xc7\x88\xd1\xf5\xbf\x6c\xc1\x4f\x22\xf4\x6e\x75\x55\x05\x99\xd2\x43\x83\x3a\xe8\xd1\xc6\xf5\xa8\x60\xdf\x91\x86\x8f\xf7\x8b\x12\xc4\xb1\x3b\x84\x63\xb3\x01\x41\x7c\x24\x82\x3c\xc6\x4e\x49\x4d\x1e\xd0\x11\xe0\x2d\x4a\x85\xb5\x22\x10\x83\x0b\x5f\x1f\x01\x61\x88\xdb\x9f\xe5\x77\x1e\x67\xd9\x69\x36\x99\x7f\x9f\xdf\x1f\xbd\x35\x96\x1c\xb2\x71\xf1\x11\xd3\x33\x5b\x7b\xab\x88\xe9\xf7\x86\xbd\x50\xca\x62\x31\xfb\xff\x56\xe9\x81\xd0\x78\xc9\x7c\x0d\x00\x00\xff\xff\x37\x7d\x7d\xfc\x30\x05\x00\x00")

func dataTutorialRecreate_logsBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_logs,
		"data/tutorial/recreate_logs",
	)
}

func dataTutorialRecreate_logs() (*asset, error) {
	bytes, err := dataTutorialRecreate_logsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_logs", size: 1328, mode: os.FileMode(420), modTime: time.Unix(1484413807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_recovered_data = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x28\x28\x2e\xcc\x51\x50\x29\x2d\xca\x54\xd0\x4d\x56\x50\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\x52\x70\x0b\xf2\xf7\x55\x48\x49\xcd\xcd\xb7\x56\xe2\x52\x28\x4b\xcc\x29\x4d\xe5\xd2\x85\x00\x2e\x85\xa2\xfc\x72\x43\x30\x69\xc4\xa5\x61\x04\xa2\x8b\x35\xb9\x00\x01\x00\x00\xff\xff\x1d\xfe\x7c\x59\x49\x00\x00\x00")

func dataTutorialRecreate_recovered_dataBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_recovered_data,
		"data/tutorial/recreate_recovered_data",
	)
}

func dataTutorialRecreate_recovered_data() (*asset, error) {
	bytes, err := dataTutorialRecreate_recovered_dataBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_recovered_data", size: 73, mode: os.FileMode(420), modTime: time.Unix(1477538916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_recovery_complete = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcc\x41\xaa\xc2\x30\x14\x46\xe1\x79\x57\xf1\xc3\x9b\xbe\x84\xa4\x85\x14\x23\x38\x14\x0a\xa2\x6b\x08\xe9\xb5\x0d\x8d\xb9\x35\x09\x74\xfb\x22\x16\xa7\x0e\xcf\xe0\x7c\x7f\x18\xd9\x2f\x94\x11\x79\x2a\x18\x43\x9a\x58\xac\x5c\xea\x94\xa9\x3c\x23\xc4\xbd\x91\x52\x36\xab\xab\x99\x53\x38\xa1\x55\xda\x08\xad\x44\xdb\x43\x75\xb6\x35\x56\xab\x7f\x63\x0e\x18\xae\xe7\x9b\xc5\x85\xfd\x02\xde\x12\x65\x8b\x7d\xd1\x47\x0c\x70\x8f\x6f\xfe\xa0\xfa\x6e\xa7\x12\xc3\xf9\x1a\x38\x49\x20\xbc\x81\x3a\x13\x22\xb9\x91\x32\xb6\x50\xe7\x4f\xb3\x5f\x9a\x57\x00\x00\x00\xff\xff\xe6\xf1\x8a\x3b\xc2\x00\x00\x00")

func dataTutorialRecreate_recovery_completeBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_recovery_complete,
		"data/tutorial/recreate_recovery_complete",
	)
}

func dataTutorialRecreate_recovery_complete() (*asset, error) {
	bytes, err := dataTutorialRecreate_recovery_completeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_recovery_complete", size: 194, mode: os.FileMode(420), modTime: time.Unix(1477538908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialShow_usage = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\x5d\x6f\xd3\x40\x10\x7c\xbf\x5f\x31\x12\x96\x48\x24\x5c\x87\x8f\xbe\x44\xb2\x10\x38\x15\x8d\x88\xea\x90\x8f\xb7\x48\x8b\xb1\xb7\xe6\xc4\xd9\x97\x9e\xef\x80\xaa\xee\x7f\x47\xeb\xb4\x90\x14\x84\x2d\xad\x4e\x33\xb3\xb7\xb3\x63\x3f\x43\x65\xcb\x6f\xec\xe0\x42\x8b\x4a\xb7\xb5\xf5\xda\x70\x97\x0c\xc7\x78\x6f\x3b\x5f\x3b\xee\x6e\x8c\x02\x11\x11\x40\xaa\x07\x08\xbb\x11\x8d\x09\x02\x48\x11\x9c\x84\x79\x7c\x9f\x13\x76\x48\x40\x9f\xd1\x27\xa2\x16\x8a\xfe\xd0\x3d\x46\x74\xa8\x63\xf4\xaa\x97\x9b\x93\x9e\x06\x05\xf5\x3b\xa2\x17\x90\x4a\x89\xc2\xe9\xd3\x0f\xa0\x9a\x89\x37\x2c\x0f\xde\xd6\x9f\x16\x28\x6d\xeb\x75\x1b\x6c\xe8\xcc\x2d\x0a\x57\x7e\xd5\xdf\xb9\xc2\xb5\xb3\x0d\x66\xc5\x2d\x5e\x9e\x29\x75\x69\x7f\xc0\x5b\xd9\x72\xaa\x14\xb0\xdc\xbe\x5f\xcc\x33\x5a\xe6\xab\x4d\x7a\x3e\x99\x4c\x14\x8e\x73\x88\x2b\xec\x86\xd9\x71\xdc\x16\x0d\xe3\x69\x18\x8f\x2c\x63\x96\x67\x1f\x2f\x56\x74\x99\xaf\x37\x34\x5f\xa6\xd1\xdd\x29\x30\x7d\xeb\xf8\x26\x68\xc7\xd5\xfd\xbf\x7b\xc4\x00\x9d\xbf\x79\xfd\x2a\x8d\xee\x8e\x3c\xdd\x23\xde\xe3\x14\x99\x8a\xea\xe8\x92\xf9\xd5\x87\x9c\xde\x65\x59\xbe\xbd\xda\xa4\xd1\xa8\xd6\x5e\x62\xb8\xd6\x35\xe2\xb8\x36\xf6\x4b\x61\xe4\xc0\x1e\xa1\x63\x77\xc6\x4d\xa1\xcd\xf8\x69\x7b\xb6\xd8\xae\x37\x17\xab\xb4\xe2\xc6\xc6\xa5\x09\x9d\x67\x17\x3b\xde\x9b\xa2\xe4\x86\x1f\xd4\xff\xf9\x29\xa6\xa6\xf0\xdc\xf9\xdf\xe9\xca\xb8\x4a\x3b\x2e\xfd\xf1\xd7\xd9\xae\xe6\x43\xe6\x08\x4e\xa7\xd1\xe8\x21\x67\xfe\xc9\xe5\xdf\xc1\x96\x85\x47\x72\xd8\x23\x09\x4e\x8f\xa5\x6d\x2f\x44\x14\x9c\x56\xbf\x02\x00\x00\xff\xff\xb0\x1e\x5c\x16\xad\x02\x00\x00")

func dataTutorialShow_usageBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialShow_usage,
		"data/tutorial/show_usage",
	)
}

func dataTutorialShow_usage() (*asset, error) {
	bytes, err := dataTutorialShow_usageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/show_usage", size: 685, mode: os.FileMode(420), modTime: time.Unix(1487140008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/tutorial/docker_host_ip_docker_machine": dataTutorialDocker_host_ip_docker_machine,
	"data/tutorial/docker_host_ip_dockermac": dataTutorialDocker_host_ip_dockermac,
	"data/tutorial/docker_run_5000": dataTutorialDocker_run_5000,
	"data/tutorial/get_started": dataTutorialGet_started,
	"data/tutorial/insert_data": dataTutorialInsert_data,
	"data/tutorial/pg_switch_xlog": dataTutorialPg_switch_xlog,
	"data/tutorial/postgres_uri": dataTutorialPostgres_uri,
	"data/tutorial/recreate": dataTutorialRecreate,
	"data/tutorial/recreate_logs": dataTutorialRecreate_logs,
	"data/tutorial/recreate_recovered_data": dataTutorialRecreate_recovered_data,
	"data/tutorial/recreate_recovery_complete": dataTutorialRecreate_recovery_complete,
	"data/tutorial/show_usage": dataTutorialShow_usage,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"tutorial": &bintree{nil, map[string]*bintree{
			"docker_host_ip_docker_machine": &bintree{dataTutorialDocker_host_ip_docker_machine, map[string]*bintree{}},
			"docker_host_ip_dockermac": &bintree{dataTutorialDocker_host_ip_dockermac, map[string]*bintree{}},
			"docker_run_5000": &bintree{dataTutorialDocker_run_5000, map[string]*bintree{}},
			"get_started": &bintree{dataTutorialGet_started, map[string]*bintree{}},
			"insert_data": &bintree{dataTutorialInsert_data, map[string]*bintree{}},
			"pg_switch_xlog": &bintree{dataTutorialPg_switch_xlog, map[string]*bintree{}},
			"postgres_uri": &bintree{dataTutorialPostgres_uri, map[string]*bintree{}},
			"recreate": &bintree{dataTutorialRecreate, map[string]*bintree{}},
			"recreate_logs": &bintree{dataTutorialRecreate_logs, map[string]*bintree{}},
			"recreate_recovered_data": &bintree{dataTutorialRecreate_recovered_data, map[string]*bintree{}},
			"recreate_recovery_complete": &bintree{dataTutorialRecreate_recovery_complete, map[string]*bintree{}},
			"show_usage": &bintree{dataTutorialShow_usage, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

