// Code generated by go-bindata.
// sources:
// data/tutorial/docker_host_ip_docker_machine
// data/tutorial/docker_host_ip_dockermac
// data/tutorial/docker_run_5000
// data/tutorial/get_started
// data/tutorial/insert_data
// data/tutorial/pg_switch_xlog
// data/tutorial/postgres_uri
// data/tutorial/recreate
// data/tutorial/recreate_logs
// data/tutorial/recreate_recovered_data
// data/tutorial/recreate_recovery_complete
// data/tutorial/show_usage
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTutorialDocker_host_ip_docker_machine = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\x48\xc9\x4f\xce\x4e\x2d\xd2\xcd\x4d\x4c\xce\xc8\xcc\x4b\x55\xc8\x2c\x50\xf0\x73\xf4\x75\xd5\xe4\x02\x04\x00\x00\xff\xff\x3b\x6b\x3a\x0e\x2b\x00\x00\x00")

func dataTutorialDocker_host_ip_docker_machineBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_host_ip_docker_machine,
		"data/tutorial/docker_host_ip_docker_machine",
	)
}

func dataTutorialDocker_host_ip_docker_machine() (*asset, error) {
	bytes, err := dataTutorialDocker_host_ip_docker_machineBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_host_ip_docker_machine", size: 43, mode: os.FileMode(420), modTime: time.Unix(1477516107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDocker_host_ip_dockermac = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\xc8\x4c\x4b\xce\xcf\x4b\xcb\x4c\x57\xa8\x51\x48\x2f\x4a\x2d\x50\xc8\xcc\x4b\x2d\x81\xb1\x75\xcb\xc0\x5c\x33\x24\xbe\xa1\x91\xb9\x9e\x81\x9e\x81\x9e\xa1\x42\x8d\x42\x46\x6a\x62\x8a\x82\x6e\x1e\x88\x99\x58\x9e\xad\xa0\x5e\x5d\x50\x94\x99\x57\xa2\xa0\x62\x54\xab\xae\xc9\x05\x08\x00\x00\xff\xff\x46\x83\xec\x58\x6b\x00\x00\x00")

func dataTutorialDocker_host_ip_dockermacBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_host_ip_dockermac,
		"data/tutorial/docker_host_ip_dockermac",
	)
}

func dataTutorialDocker_host_ip_dockermac() (*asset, error) {
	bytes, err := dataTutorialDocker_host_ip_dockermacBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_host_ip_dockermac", size: 107, mode: os.FileMode(420), modTime: time.Unix(1477516105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDocker_run_5000 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x5f\x6f\xda\x30\x14\xc5\xdf\xf3\x29\xae\xb2\xbe\x3a\x04\x30\x83\x20\xb1\x49\x63\xac\x43\xad\x1a\x04\xe1\x6d\x52\xe4\x3f\x97\xc4\xaa\xb1\xa9\xed\x8c\xb1\xaa\xdf\x7d\x0a\x5d\x33\xd1\xf1\x7a\xef\x3d\xe7\x9e\xf3\xfb\x00\xd2\x8a\x47\x74\xe0\x1a\x03\x44\xc2\x8f\x08\x80\x10\xc3\xf6\x08\x52\x99\xca\x92\x83\xf5\xa1\x72\xe8\x9f\xf4\xeb\x0e\xe1\x6b\x3e\xbf\x5b\xac\xcb\xef\xf9\xa6\x28\x97\xab\xd9\xcd\xf3\xe5\x60\xfa\xd9\xe1\x53\xa3\x1c\xca\x97\x6b\x8a\x55\xbe\x2e\xca\x11\x1d\x0e\x66\x37\xcf\xab\xed\x97\xfb\xe5\xfc\x3c\x9a\x92\x51\x9a\xa6\x2f\x40\x0e\x70\x6d\x3e\x6d\x15\x9d\xdd\xf2\xe1\x36\x2f\xf3\xf5\x6d\x59\xe4\x77\x8b\x87\x59\xa5\x2d\x67\x9a\x58\x57\x5d\x5e\xcc\xef\xb7\x9b\x62\xb1\x9e\x49\xdc\x5b\x22\x74\xe3\x03\x3a\xe2\xf0\xa0\x99\xc0\x3d\x9e\x6f\xcf\x1d\x83\xd2\xe8\x7b\xef\xeb\x46\x19\x95\xfd\xc9\x30\x15\x1f\x29\x4f\x07\xc3\x31\xa6\x22\xeb\xcb\x49\x9a\x66\x1c\x47\x94\x0f\x38\x15\x59\x5f\x4c\xfa\xbb\x21\x1b\x70\x4e\xc7\xa3\x2c\x93\x54\xf6\x29\x1d\x23\x0a\xca\xe8\x28\x8a\x3a\xb8\xda\x56\xfe\x7f\x9e\x64\x17\x25\x49\x12\x1d\x58\x70\xd6\xa8\x4f\x50\xd4\x08\xbb\x36\x0b\x70\xd4\xd6\x54\xca\x54\x10\x2c\x84\x5a\x79\x90\x2c\x30\xce\x3c\x82\x3f\xf9\x80\x7b\x38\x2a\xad\x81\x23\xd8\xa3\x41\x09\xfc\x04\x8d\x47\x07\xf1\x9b\x7b\x7c\x61\xab\xfc\xeb\x7a\xdf\xf8\x00\x4c\x7b\xdb\xca\x20\xd4\x08\x1e\xdd\x4f\x74\x70\x70\x56\xa0\xf7\xff\x44\x97\xa1\xba\xe7\x7f\x21\x76\xdf\x95\x51\x41\x31\xad\x7e\xa3\x84\xa3\x0a\x35\x68\x2b\x98\x46\x88\xd1\x94\xdb\x4d\xb2\x2d\xbe\x91\x49\xfc\xae\xa1\xc4\x1d\x6b\x74\x80\x80\xbf\x02\x78\x64\x4e\xd4\x20\xac\xd9\xa9\xaa\x71\x2c\x28\x6b\x3a\x77\x8f\xa1\xed\x1f\xa3\xa9\xb4\xf2\x75\x7c\x2d\x9e\x70\xc8\x42\x0b\x4a\x2a\x87\x22\x58\x77\x82\x5e\x1b\xb7\xf7\x46\x22\x85\x24\x49\xc0\x3e\x9e\x51\xff\x09\x00\x00\xff\xff\x84\x4c\x9c\xc8\xee\x02\x00\x00")

func dataTutorialDocker_run_5000Bytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_run_5000,
		"data/tutorial/docker_run_5000",
	)
}

func dataTutorialDocker_run_5000() (*asset, error) {
	bytes, err := dataTutorialDocker_run_5000Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_run_5000", size: 750, mode: os.FileMode(420), modTime: time.Unix(1484418617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialGet_started = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x41\xab\xc2\x30\x10\x84\xef\xf9\x15\x03\xef\xf0\x5a\x78\xcf\xe0\x7f\xe8\xd1\x83\xe2\xb5\x30\x96\x36\xd6\x60\x4d\x34\x69\x85\xc2\xfe\x78\xd9\x16\x11\x77\x61\x58\xe6\x1b\x96\xf9\x41\x17\xdb\xab\x4b\x48\x53\x40\xe7\x43\x1f\x47\x3f\xb8\x6c\x97\xf3\xff\x1e\xf3\xd8\x27\x97\x1f\x83\x01\x49\x02\x34\x02\x10\x75\xc1\x92\x50\x43\x45\x7d\x2a\x79\xef\x2f\x51\xc3\x82\x27\x88\xd5\xb4\x22\x7e\xb0\xa0\xe0\xaa\x25\xc4\x88\x7e\xb6\xc2\x25\x41\xa9\xc9\x3f\xa8\xd2\x1a\x7c\x8f\x2c\xa6\xa9\xb4\x1b\xf6\x6b\xb7\xe3\x61\x87\x36\x86\xd1\x87\x29\x4e\x79\x98\xd1\xa4\xf6\xe2\x9f\xae\xc3\x39\xc5\x1b\xaa\x66\xc6\x76\x63\x5e\x01\x00\x00\xff\xff\x0e\x5e\x12\x06\xe7\x00\x00\x00")

func dataTutorialGet_startedBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialGet_started,
		"data/tutorial/get_started",
	)
}

func dataTutorialGet_started() (*asset, error) {
	bytes, err := dataTutorialGet_startedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/get_started", size: 231, mode: os.FileMode(420), modTime: time.Unix(1477516098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialInsert_data = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x48\x2e\x4a\x4d\x2c\x49\x55\x28\x49\x4c\xca\x49\x55\x48\x49\xcd\xcd\x57\xd0\x28\x4b\xcc\x29\x4d\x55\x28\x49\xad\x28\xd1\xb4\xe6\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\xe5\x52\x56\xc8\xcc\x2b\x4e\x2d\x2a\x51\xc8\xcc\x2b\xc9\x87\xa8\x06\x2b\x2e\x56\xd0\x50\x2f\xca\x2f\x37\x54\xd7\xb4\xe6\xf2\xf4\x0b\x76\x0d\x0a\x51\x30\x50\x30\x24\xa4\xdc\x08\x43\x79\x71\x6a\x4e\x6a\x72\x89\x82\x96\x82\x5b\x90\xbf\x2f\x58\x83\x35\x17\x44\x0b\x97\x2e\x04\x70\x29\x80\xec\x01\x93\x46\x5c\x1a\x46\x20\xba\x58\x93\x0b\x10\x00\x00\xff\xff\xf0\x11\x04\xec\xc7\x00\x00\x00")

func dataTutorialInsert_dataBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialInsert_data,
		"data/tutorial/insert_data",
	)
}

func dataTutorialInsert_data() (*asset, error) {
	bytes, err := dataTutorialInsert_dataBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/insert_data", size: 199, mode: os.FileMode(420), modTime: time.Unix(1477538350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialPg_switch_xlog = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x28\x4e\xcd\x49\x4d\x2e\x51\x28\x48\x8f\x2f\x2e\xcf\x2c\x49\xce\x88\xaf\xc8\xc9\x4f\xd7\xd0\xb4\xe6\x42\x13\xe2\xd2\x45\x03\x5c\x0a\x06\xfa\x46\xa6\x06\x06\x06\x06\xe6\x16\x5c\x1a\x86\x0a\x45\xf9\xe5\x9a\x5c\x5c\xca\x0a\x31\x85\x5c\x80\x00\x00\x00\xff\xff\xdd\x74\xa8\x08\x56\x00\x00\x00")

func dataTutorialPg_switch_xlogBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialPg_switch_xlog,
		"data/tutorial/pg_switch_xlog",
	)
}

func dataTutorialPg_switch_xlog() (*asset, error) {
	bytes, err := dataTutorialPg_switch_xlogBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/pg_switch_xlog", size: 86, mode: os.FileMode(420), modTime: time.Unix(1477538355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialPostgres_uri = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x8f\x4d\xca\x83\x30\x10\x86\xf7\x39\xc5\x60\x5c\x28\x7c\x26\x2a\xc9\xe2\x13\x84\x1e\xa2\x17\x90\x38\xda\x50\x6b\xd2\x89\xe9\xcf\xed\x4b\x0a\xb6\xeb\x6e\x86\x77\x9e\x81\xe1\x79\x39\x8c\xce\x9c\x91\x00\x1f\x68\x60\xb4\xeb\xec\x2a\xef\xc2\x36\x13\x86\xeb\x02\x66\xd8\x40\x1a\xb7\x4e\x76\x96\x91\x2c\xdb\x4f\x9d\x94\x21\x7a\xa4\x18\x90\xaa\x34\xd6\xe1\x82\xdd\x17\xf9\x21\x84\xbb\xa3\xf1\xa0\x95\x68\x94\x16\xad\x6e\x44\xab\x74\xa7\xeb\xba\x96\xfb\x13\xc6\x38\x44\xb2\x7d\x5e\xfc\xe2\x50\x32\x0e\x3e\xf1\xfc\x2d\x94\x52\xf1\x2f\xb4\x68\xfe\x20\x20\xdd\x90\x20\x6d\xaa\x64\xc7\xa7\x47\xc8\x4e\xb8\xf8\x0c\x26\x47\x90\x92\x60\x9f\x0a\x3d\x67\xaf\x00\x00\x00\xff\xff\xaa\x96\xb4\xdc\xfd\x00\x00\x00")

func dataTutorialPostgres_uriBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialPostgres_uri,
		"data/tutorial/postgres_uri",
	)
}

func dataTutorialPostgres_uri() (*asset, error) {
	bytes, err := dataTutorialPostgres_uriBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/postgres_uri", size: 253, mode: os.FileMode(420), modTime: time.Unix(1477531445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x5f\x6b\xbb\x30\x14\x40\xdf\xfb\x29\x02\xbf\xbe\x86\x5f\x5a\x8d\x75\x82\x0c\xe6\xa4\x93\x96\x46\xac\x7d\x1b\x48\xfe\x5c\x45\x16\x8d\x8d\xfa\x54\xfa\xdd\x47\x1d\x94\x15\xfb\xb0\xb7\x70\x72\xce\x85\x7b\xff\x21\x65\xe4\x17\x58\xd4\x0f\xa6\x43\xaa\x6e\x2b\x83\x3b\xd3\x0f\x95\x85\xfe\xac\x17\x33\x70\xf7\x6d\xf3\x07\xfb\x97\x3e\xb6\x08\x2b\xf4\xb9\x40\x08\xe3\x96\x37\x30\xab\x7f\xfe\x00\xbd\xb3\x68\x17\x67\xc5\x07\x3b\xe6\x45\x92\x86\xcb\xcb\x23\x08\x5e\x2d\x9c\xc7\xda\x82\xba\x3e\x2b\x52\x96\xe5\x05\x75\x9d\x75\xb8\xbc\xa4\xa7\xb7\x7d\x12\x4d\x28\xc0\x94\x10\x72\x45\xb8\x43\xcf\x78\x70\x2b\xee\xe3\x92\xc3\x96\x15\x2c\xdb\x16\x39\xdb\xc5\x87\xb0\xd2\x46\x70\x8d\x8d\xad\x1e\x8d\x68\x7f\x3a\xe6\x71\x16\x2a\x68\x0c\x96\x7a\xec\x07\xb0\xd8\x42\xa7\xb9\x84\x06\x26\x77\xda\x71\xa8\x35\xf4\xff\x67\xb7\x11\x2b\xe5\x51\xe5\x83\x92\x5c\x3a\xc2\xf5\x25\xf5\x28\x29\x89\x00\xff\x85\x96\x72\xed\x13\x4f\xf0\xd2\x29\x95\xb7\x72\x1c\x57\x6d\x68\x49\x28\xb9\x3d\x56\x02\xbc\x35\xdf\xc8\xc5\x77\x00\x00\x00\xff\xff\xd1\xc7\x17\x98\xbb\x01\x00\x00")

func dataTutorialRecreateBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate,
		"data/tutorial/recreate",
	)
}

func dataTutorialRecreate() (*asset, error) {
	bytes, err := dataTutorialRecreateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate", size: 443, mode: os.FileMode(420), modTime: time.Unix(1484413778, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_logs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x94\x4f\x6f\xd3\x40\x10\xc5\xef\xfd\x14\x23\x71\xf6\x9f\xd8\x4a\xd2\x58\x32\x52\x44\x5b\x88\x54\x0a\x4a\x9d\x73\x35\xf6\x4e\xec\x25\xeb\xdd\x65\x77\xdc\x90\x7e\x7a\xb4\x4e\x4b\x29\x05\x54\x21\xc1\x81\x91\x7c\xb2\x3d\xf3\xf6\xf7\xde\xec\x2b\x10\xa6\xd9\x91\x03\x65\x5a\x0f\x42\xea\xd6\x44\xd6\x78\x6e\x1d\xf9\xcf\x0a\xa2\xed\x49\x1c\xc7\x27\x16\xd9\x19\x2d\x5f\xc3\xc5\xb2\x5a\x5e\x16\x00\xdc\x11\x08\x64\xac\xd1\x13\xf8\x83\x67\xea\x41\x7a\xf0\x8c\x8e\xa5\x6e\x61\xb0\xff\xec\x9f\xa0\xef\xa9\xc8\x87\xba\xae\xd6\x9b\x37\xd5\x66\x7d\x7e\x56\x00\xcb\x9e\xca\x2c\x9d\xcc\xa2\x49\x1a\x65\xf3\x2a\xcd\x8b\x6c\x5a\xa4\xb3\x78\x71\x3a\x9d\xe4\x8b\x28\x4d\xc1\x4a\x51\xce\xf2\x34\x07\x6c\x58\x1a\x5d\xee\x51\x45\x5b\xe2\xa6\x83\x1d\x1d\x4a\x9f\x17\x49\x72\xe4\x83\x56\x46\x82\x6e\x23\xe1\xb4\x6c\x92\x1a\x9b\xdd\x60\x7d\x22\xa8\x37\x51\xa3\x06\xcf\xe4\x22\x47\x56\x61\x43\x3d\x25\x7b\x54\xe1\xb9\x49\xd3\x69\x92\x1e\x6b\x92\x3e\xa9\x6c\x16\xab\x3b\x03\xd6\xd1\x56\x7e\x29\x5f\xd0\x0e\x3c\xb5\xe5\xaf\x7a\x05\x36\x4c\x65\x4d\xad\xd4\x8f\x48\xd4\x9d\xb1\x05\xf8\xce\x38\x06\x47\x28\x1e\xdf\x04\x6d\x14\xd7\xca\xd4\x9e\x8d\xa3\xd8\xe7\xb1\xcf\x6f\x06\x96\x0a\x56\x57\x17\x1f\x46\x90\xef\xaf\xdf\x16\xd0\x98\x41\x09\xd0\x06\x94\xd1\xed\x18\x98\x06\x99\xc0\xd4\x9f\xa8\x61\xd8\x77\x52\x11\x58\x72\x5b\xe3\xfa\xe0\xcc\x1e\x15\x38\x1a\x7b\x3e\x77\xe6\xec\xbc\x5a\xae\x2e\x0b\xa8\x3a\x02\xac\xbd\x51\x03\x13\x6c\xd6\x2b\xe0\x0e\xf9\xdb\x24\x86\x9a\xee\xc7\x88\xd1\xf5\xbf\x6c\xc1\x4f\x22\xf4\x6e\x75\x55\x05\x99\xd2\x43\x83\x3a\xe8\xd1\xc6\xf5\xa8\x60\xdf\x91\x86\x8f\xf7\x8b\x12\xc4\xb1\x3b\x84\x63\xb3\x01\x41\x7c\x24\x82\x3c\xc6\x4e\x49\x4d\x1e\xd0\x11\xe0\x2d\x4a\x85\xb5\x22\x10\x83\x0b\x5f\x1f\x01\x61\x88\xdb\x9f\xe5\x77\x1e\x67\xd9\x69\x36\x99\x7f\x9f\xdf\x1f\xbd\x35\x96\x1c\xb2\x71\xf1\x11\xd3\x33\x5b\x7b\xab\x88\xe9\xf7\x86\xbd\x50\xca\x62\x31\xfb\xff\x56\xe9\x81\xd0\x78\xc9\x7c\x0d\x00\x00\xff\xff\x37\x7d\x7d\xfc\x30\x05\x00\x00")

func dataTutorialRecreate_logsBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_logs,
		"data/tutorial/recreate_logs",
	)
}

func dataTutorialRecreate_logs() (*asset, error) {
	bytes, err := dataTutorialRecreate_logsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_logs", size: 1328, mode: os.FileMode(420), modTime: time.Unix(1484413807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_recovered_data = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x28\x28\x2e\xcc\x51\x50\x29\x2d\xca\x54\xd0\x4d\x56\x50\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\x52\x70\x0b\xf2\xf7\x55\x48\x49\xcd\xcd\xb7\x56\xe2\x52\x28\x4b\xcc\x29\x4d\xe5\xd2\x85\x00\x2e\x85\xa2\xfc\x72\x43\x30\x69\xc4\xa5\x61\x04\xa2\x8b\x35\xb9\x00\x01\x00\x00\xff\xff\x1d\xfe\x7c\x59\x49\x00\x00\x00")

func dataTutorialRecreate_recovered_dataBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_recovered_data,
		"data/tutorial/recreate_recovered_data",
	)
}

func dataTutorialRecreate_recovered_data() (*asset, error) {
	bytes, err := dataTutorialRecreate_recovered_dataBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_recovered_data", size: 73, mode: os.FileMode(420), modTime: time.Unix(1477538916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialRecreate_recovery_complete = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcc\x41\xaa\xc2\x30\x14\x46\xe1\x79\x57\xf1\xc3\x9b\xbe\x84\xa4\x85\x14\x23\x38\x14\x0a\xa2\x6b\x08\xe9\xb5\x0d\x8d\xb9\x35\x09\x74\xfb\x22\x16\xa7\x0e\xcf\xe0\x7c\x7f\x18\xd9\x2f\x94\x11\x79\x2a\x18\x43\x9a\x58\xac\x5c\xea\x94\xa9\x3c\x23\xc4\xbd\x91\x52\x36\xab\xab\x99\x53\x38\xa1\x55\xda\x08\xad\x44\xdb\x43\x75\xb6\x35\x56\xab\x7f\x63\x0e\x18\xae\xe7\x9b\xc5\x85\xfd\x02\xde\x12\x65\x8b\x7d\xd1\x47\x0c\x70\x8f\x6f\xfe\xa0\xfa\x6e\xa7\x12\xc3\xf9\x1a\x38\x49\x20\xbc\x81\x3a\x13\x22\xb9\x91\x32\xb6\x50\xe7\x4f\xb3\x5f\x9a\x57\x00\x00\x00\xff\xff\xe6\xf1\x8a\x3b\xc2\x00\x00\x00")

func dataTutorialRecreate_recovery_completeBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialRecreate_recovery_complete,
		"data/tutorial/recreate_recovery_complete",
	)
}

func dataTutorialRecreate_recovery_complete() (*asset, error) {
	bytes, err := dataTutorialRecreate_recovery_completeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/recreate_recovery_complete", size: 194, mode: os.FileMode(420), modTime: time.Unix(1477538908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialShow_usage = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xef\x6b\xdb\x30\x10\xfd\xae\xbf\xe2\xc1\x02\x4b\x60\x9a\xb3\x1f\xfd\x12\x30\x83\x25\xa1\x0d\x0d\x75\xe6\x24\xdf\x02\x37\x4f\xbe\x7a\x62\x8a\x95\xca\xd2\xb6\x52\xf5\x7f\x1f\x72\xdb\x2d\xe9\xc6\x6c\x38\xc4\x7b\xef\x4e\x4f\xef\x5e\xa0\xb6\xea\x1b\x3b\xb8\xd0\xa2\xd6\x6d\x63\xbd\x36\xdc\x65\xfd\x51\x1e\x6c\xe7\x1b\xc7\xdd\x8d\x11\x20\x22\x02\x48\x44\x80\xb0\x1b\xd2\x88\x90\x80\x54\x12\x4e\x89\x79\xfa\x5f\x12\x76\xc8\x40\x9f\x11\xb3\xa4\x4e\x14\xfd\xa1\x23\x86\xf4\x50\x47\x88\x22\xa6\xc9\x59\xa4\x5e\x41\x71\x47\xf4\x0a\xa9\x52\x26\x70\xfa\xc5\x1e\x14\xb3\xe4\x0d\xab\x07\x6f\xeb\x4f\x4b\x28\xdb\x7a\xdd\x06\x1b\x3a\x73\x8b\xca\xa9\xaf\xfa\x3b\xd7\xb8\x76\x76\x8f\x59\x75\x8b\x37\xaf\x85\xb8\xb0\x3f\xe0\x6d\x7a\xe5\x44\x08\x60\xb5\xfd\xb8\x5c\x4c\x69\x55\x94\x9b\xfc\x6c\x3c\x1e\x0b\x1c\xe7\x20\x6b\xec\xfa\xbb\xa5\x6c\xab\x3d\xe3\x79\x18\x4f\x2c\x63\x56\x4c\x2f\xe7\x25\x5d\x14\xeb\x0d\x2d\x56\xf9\xe0\xee\x14\x98\x7c\x70\x7c\x13\xb4\xe3\xfa\xfe\xdf\x3d\xc9\x00\x9d\xbd\x7f\xf7\x36\x1f\xdc\x1d\x79\xba\x87\x3c\xe0\x14\x99\x24\xd5\xd1\x90\xc5\xd5\x79\x41\x45\x79\x4e\x9b\xe2\x72\x7e\x95\x37\xc6\x7e\xa9\x8c\xb4\xae\x79\xae\x99\x2e\xb7\xeb\xcd\xbc\xcc\x6b\xde\x5b\xa9\x4c\xe8\x3c\x3b\xe9\xf8\x60\x2a\xc5\x7b\x7e\x54\xff\x67\xf3\x13\x53\x79\xee\xfc\xef\x08\x1b\xf6\xa8\xb5\x63\xe5\x8f\x57\xb0\x2d\x17\x7d\xb0\x08\x4e\xe7\x83\xe1\x63\x98\xfc\x93\xd5\xdf\xe9\xa9\xca\x23\x53\xb6\xbd\xd6\x4d\x16\x9c\x1e\xa5\xb6\x43\x22\x06\xc1\x69\xf1\x2b\x00\x00\xff\xff\x1c\xa6\x4a\x29\x92\x02\x00\x00")

func dataTutorialShow_usageBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialShow_usage,
		"data/tutorial/show_usage",
	)
}

func dataTutorialShow_usage() (*asset, error) {
	bytes, err := dataTutorialShow_usageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/show_usage", size: 658, mode: os.FileMode(420), modTime: time.Unix(1484413768, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/tutorial/docker_host_ip_docker_machine": dataTutorialDocker_host_ip_docker_machine,
	"data/tutorial/docker_host_ip_dockermac": dataTutorialDocker_host_ip_dockermac,
	"data/tutorial/docker_run_5000": dataTutorialDocker_run_5000,
	"data/tutorial/get_started": dataTutorialGet_started,
	"data/tutorial/insert_data": dataTutorialInsert_data,
	"data/tutorial/pg_switch_xlog": dataTutorialPg_switch_xlog,
	"data/tutorial/postgres_uri": dataTutorialPostgres_uri,
	"data/tutorial/recreate": dataTutorialRecreate,
	"data/tutorial/recreate_logs": dataTutorialRecreate_logs,
	"data/tutorial/recreate_recovered_data": dataTutorialRecreate_recovered_data,
	"data/tutorial/recreate_recovery_complete": dataTutorialRecreate_recovery_complete,
	"data/tutorial/show_usage": dataTutorialShow_usage,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"tutorial": &bintree{nil, map[string]*bintree{
			"docker_host_ip_docker_machine": &bintree{dataTutorialDocker_host_ip_docker_machine, map[string]*bintree{}},
			"docker_host_ip_dockermac": &bintree{dataTutorialDocker_host_ip_dockermac, map[string]*bintree{}},
			"docker_run_5000": &bintree{dataTutorialDocker_run_5000, map[string]*bintree{}},
			"get_started": &bintree{dataTutorialGet_started, map[string]*bintree{}},
			"insert_data": &bintree{dataTutorialInsert_data, map[string]*bintree{}},
			"pg_switch_xlog": &bintree{dataTutorialPg_switch_xlog, map[string]*bintree{}},
			"postgres_uri": &bintree{dataTutorialPostgres_uri, map[string]*bintree{}},
			"recreate": &bintree{dataTutorialRecreate, map[string]*bintree{}},
			"recreate_logs": &bintree{dataTutorialRecreate_logs, map[string]*bintree{}},
			"recreate_recovered_data": &bintree{dataTutorialRecreate_recovered_data, map[string]*bintree{}},
			"recreate_recovery_complete": &bintree{dataTutorialRecreate_recovery_complete, map[string]*bintree{}},
			"show_usage": &bintree{dataTutorialShow_usage, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

