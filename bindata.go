// Code generated by go-bindata.
// sources:
// data/tutorial/docker_host_ip_docker_machine
// data/tutorial/docker_host_ip_dockermac
// data/tutorial/docker_run_5000
// data/tutorial/get_started
// data/tutorial/postgres_uri
// data/tutorial/show_usage
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTutorialDocker_host_ip_docker_machine = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\x48\xc9\x4f\xce\x4e\x2d\xd2\xcd\x4d\x4c\xce\xc8\xcc\x4b\x55\xc8\x2c\x50\xf0\x73\xf4\x75\xd5\xe4\x02\x04\x00\x00\xff\xff\x3b\x6b\x3a\x0e\x2b\x00\x00\x00")

func dataTutorialDocker_host_ip_docker_machineBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_host_ip_docker_machine,
		"data/tutorial/docker_host_ip_docker_machine",
	)
}

func dataTutorialDocker_host_ip_docker_machine() (*asset, error) {
	bytes, err := dataTutorialDocker_host_ip_docker_machineBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_host_ip_docker_machine", size: 43, mode: os.FileMode(420), modTime: time.Unix(1477516107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDocker_host_ip_dockermac = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\xf1\x77\xf6\x76\x0d\x8a\xf7\xf0\x0f\x0e\x89\xf7\x0c\xb0\x55\xd1\xc8\x4c\x4b\xce\xcf\x4b\xcb\x4c\x57\xa8\x51\x48\x2f\x4a\x2d\x50\xc8\xcc\x4b\x2d\x81\xb1\x75\xcb\xc0\x5c\x33\x24\xbe\xa1\x91\xb9\x9e\x81\x9e\x81\x9e\xa1\x42\x8d\x42\x46\x6a\x62\x8a\x82\x6e\x1e\x88\x99\x58\x9e\xad\xa0\x5e\x5d\x50\x94\x99\x57\xa2\xa0\x62\x54\xab\xae\xc9\x05\x08\x00\x00\xff\xff\x46\x83\xec\x58\x6b\x00\x00\x00")

func dataTutorialDocker_host_ip_dockermacBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_host_ip_dockermac,
		"data/tutorial/docker_host_ip_dockermac",
	)
}

func dataTutorialDocker_host_ip_dockermac() (*asset, error) {
	bytes, err := dataTutorialDocker_host_ip_dockermacBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_host_ip_dockermac", size: 107, mode: os.FileMode(420), modTime: time.Unix(1477516105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialDocker_run_5000 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x4f\x6f\xda\x40\x10\xc5\xef\xfe\x14\x23\x37\x57\x3b\x06\x96\x82\x91\x68\xa5\x52\x9a\xa2\x44\x31\x02\x73\xab\x64\xed\x9f\xc1\x5e\x65\xd9\x25\xbb\xe3\x52\x1a\xe5\xbb\x57\x26\x0d\x15\x69\xae\x33\xf3\xde\xbc\xf7\xfb\x00\xca\xc9\x07\xf4\xe0\x5b\x0b\x89\x82\x1f\x11\x40\x92\x58\xbe\x43\x50\xda\xd6\x2e\xd9\xbb\x40\xb5\xc7\xf0\x68\x5e\x76\x08\x5f\x8b\xd9\xed\x7c\x55\x7d\x2f\xd6\x65\xb5\x58\x4e\xaf\x9e\x2e\x07\x93\xcf\x1e\x1f\x5b\xed\x51\x3d\xbf\xa7\x58\x16\xab\xb2\x1a\xb2\x41\x7f\x7a\xf5\xb4\xdc\x7c\xb9\x5b\xcc\x4e\xa3\x67\x48\xf6\x70\x39\x99\x74\x57\x67\x8b\xc5\xfd\x4d\x51\x15\xab\x9b\xaa\x2c\x6e\xe7\xf7\xd3\xda\x38\xc1\x4d\xe2\x7c\x7d\x79\x31\xbb\xdb\xac\xcb\xf9\x6a\xaa\x70\xe7\x12\x69\xda\x40\xe8\x93\x15\x91\x1e\x15\xa7\xc3\x53\x29\xd2\x06\xc3\xf5\xdb\x7e\x13\xc3\x09\x03\x45\x39\x53\xbd\xf1\x20\x93\x1f\x99\xc8\xfa\x83\x11\x66\x32\xef\xa9\x71\x96\xe5\x02\x87\x4c\xf4\x05\x93\x79\x4f\x8e\x7b\xdb\x01\xef\x0b\xc1\x46\xc3\x3c\x57\x4c\xf5\x18\x1b\x21\x4a\xc6\xd9\x30\x8a\xce\x50\x8d\xab\xc3\x7f\x1c\xa3\x34\x4d\xa3\x3d\x27\xef\xac\xfe\x04\x65\x83\xb0\xed\xf2\x80\x40\xe3\x6c\xad\x6d\x0d\xe4\x80\x1a\x1d\x40\x71\xe2\x82\x07\x84\x70\x0c\x84\x3b\x38\x68\x63\x40\x20\xb8\x83\x45\x05\xe2\x08\x6d\x40\x0f\xf1\xab\x75\x7c\x61\xab\xc3\xcb\x7a\xd7\x06\x02\x6e\x82\xeb\x64\x40\x0d\x42\x40\xff\x13\x3d\xec\xbd\x93\x18\xc2\x3f\xd1\x65\xa8\xf3\xf3\xbf\x14\xcf\xdf\xb5\xd5\xa4\xb9\xd1\xbf\x51\xc1\x41\x53\x03\xc6\x49\x6e\x10\x62\xb4\xd5\x66\x9d\x6e\xca\x6f\xc9\x38\x7e\xd3\x50\xe1\x96\xb7\x86\x80\xf0\x17\x41\x40\xee\x65\x03\xd2\xd9\xad\xae\x5b\xcf\x49\x3b\x7b\x76\x0f\x48\x5d\xff\x18\x6d\x6d\x74\x68\xe2\xf7\xe2\x49\x8f\x9c\x3a\x50\x4a\x7b\x94\xe4\xfc\x11\xae\xbb\xb8\xd7\xaf\x24\x32\x48\xd3\x14\xdc\xc3\x09\xf5\x9f\x00\x00\x00\xff\xff\x71\x3b\xc2\x76\xe3\x02\x00\x00")

func dataTutorialDocker_run_5000Bytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialDocker_run_5000,
		"data/tutorial/docker_run_5000",
	)
}

func dataTutorialDocker_run_5000() (*asset, error) {
	bytes, err := dataTutorialDocker_run_5000Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/docker_run_5000", size: 739, mode: os.FileMode(420), modTime: time.Unix(1477531877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialGet_started = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x41\xab\xc2\x30\x10\x84\xef\xf9\x15\x03\xef\xf0\x5a\x78\xcf\xe0\x7f\xe8\xd1\x83\xe2\xb5\x30\x96\x36\xd6\x60\x4d\x34\x69\x85\xc2\xfe\x78\xd9\x16\x11\x77\x61\x58\xe6\x1b\x96\xf9\x41\x17\xdb\xab\x4b\x48\x53\x40\xe7\x43\x1f\x47\x3f\xb8\x6c\x97\xf3\xff\x1e\xf3\xd8\x27\x97\x1f\x83\x01\x49\x02\x34\x02\x10\x75\xc1\x92\x50\x43\x45\x7d\x2a\x79\xef\x2f\x51\xc3\x82\x27\x88\xd5\xb4\x22\x7e\xb0\xa0\xe0\xaa\x25\xc4\x88\x7e\xb6\xc2\x25\x41\xa9\xc9\x3f\xa8\xd2\x1a\x7c\x8f\x2c\xa6\xa9\xb4\x1b\xf6\x6b\xb7\xe3\x61\x87\x36\x86\xd1\x87\x29\x4e\x79\x98\xd1\xa4\xf6\xe2\x9f\xae\xc3\x39\xc5\x1b\xaa\x66\xc6\x76\x63\x5e\x01\x00\x00\xff\xff\x0e\x5e\x12\x06\xe7\x00\x00\x00")

func dataTutorialGet_startedBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialGet_started,
		"data/tutorial/get_started",
	)
}

func dataTutorialGet_started() (*asset, error) {
	bytes, err := dataTutorialGet_startedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/get_started", size: 231, mode: os.FileMode(420), modTime: time.Unix(1477516098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialPostgres_uri = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x8f\x4d\xca\x83\x30\x10\x86\xf7\x39\xc5\x60\x5c\x28\x7c\x26\x2a\xc9\xe2\x13\x84\x1e\xa2\x17\x90\x38\xda\x50\x6b\xd2\x89\xe9\xcf\xed\x4b\x0a\xb6\xeb\x6e\x86\x77\x9e\x81\xe1\x79\x39\x8c\xce\x9c\x91\x00\x1f\x68\x60\xb4\xeb\xec\x2a\xef\xc2\x36\x13\x86\xeb\x02\x66\xd8\x40\x1a\xb7\x4e\x76\x96\x91\x2c\xdb\x4f\x9d\x94\x21\x7a\xa4\x18\x90\xaa\x34\xd6\xe1\x82\xdd\x17\xf9\x21\x84\xbb\xa3\xf1\xa0\x95\x68\x94\x16\xad\x6e\x44\xab\x74\xa7\xeb\xba\x96\xfb\x13\xc6\x38\x44\xb2\x7d\x5e\xfc\xe2\x50\x32\x0e\x3e\xf1\xfc\x2d\x94\x52\xf1\x2f\xb4\x68\xfe\x20\x20\xdd\x90\x20\x6d\xaa\x64\xc7\xa7\x47\xc8\x4e\xb8\xf8\x0c\x26\x47\x90\x92\x60\x9f\x0a\x3d\x67\xaf\x00\x00\x00\xff\xff\xaa\x96\xb4\xdc\xfd\x00\x00\x00")

func dataTutorialPostgres_uriBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialPostgres_uri,
		"data/tutorial/postgres_uri",
	)
}

func dataTutorialPostgres_uri() (*asset, error) {
	bytes, err := dataTutorialPostgres_uriBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/postgres_uri", size: 253, mode: os.FileMode(420), modTime: time.Unix(1477531445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTutorialShow_usage = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\x61\x6b\xdb\x30\x14\xfc\xae\x5f\x71\xb0\xc0\x12\x98\xe6\xac\x5b\xbf\x04\xcc\x60\x49\x48\x43\x42\x9d\x39\xce\x37\xc3\x9b\x27\xab\xae\x98\x63\x25\xb2\xd4\xad\x54\xfd\xef\x43\x6e\xbb\x39\xd9\xa8\x04\x0f\x71\x77\xef\xe9\x74\x7a\x83\x52\x8b\x1f\xd2\xc0\xb8\x06\xa5\x6a\x2a\x6d\x55\x2d\xdb\xa8\x3b\xf2\x83\x6e\x6d\x65\x64\x7b\xac\x19\x88\x88\x00\x62\x1e\x20\xe4\x43\x1a\x11\x02\x10\x4a\xc0\x29\x30\x2f\xfb\x2d\x21\x47\x04\xfa\x06\x1f\x05\x75\xa0\xe8\x2f\xed\x31\xa4\xa7\x3a\x82\x67\x3e\x4c\x8e\x3c\x75\x0a\xf2\x39\xd1\x3b\x84\x4a\x11\xc3\xe9\xf2\x1d\xc8\x66\xc1\x1b\x36\x4f\xde\xb6\x5f\xd7\x10\xba\xb1\xaa\x71\xda\xb5\xf5\x3d\x0a\x23\x6e\xd5\x9d\x2c\x71\x63\xf4\x1e\xb3\xe2\x1e\x1f\xde\x33\x76\xa5\x7f\xc2\xea\xf0\xca\x09\x63\xc0\x66\xf7\x65\xbd\x9c\xd2\x26\x49\xb3\xf8\x72\x3c\x1e\x33\xf4\x73\xe0\x25\xf2\xee\x6e\xce\x9b\x62\x2f\x71\x1e\xc6\x0b\x2b\x31\x4b\xa6\xab\x79\x4a\x57\xc9\x36\xa3\xe5\x26\x1e\x3c\x9c\x02\x93\xcf\x46\x1e\x9d\x32\xb2\x7c\xfc\x7f\x4f\x30\x40\x97\x9f\x3e\x5e\xc4\x83\x87\x9e\xa7\x47\xf0\x03\x4e\x91\x49\x50\xf5\x86\x2c\xaf\x17\x09\x25\xe9\x82\xb2\x64\x35\xbf\x8e\xab\x5a\x7f\x2f\x6a\xae\x4d\x75\xae\x99\xae\x77\xdb\x6c\x9e\xc6\xa5\xdc\x6b\x2e\x6a\xd7\x5a\x69\xf8\x62\x75\x7b\x77\x71\x7c\x96\xbe\xf2\xed\x93\xba\xb0\xb2\xb5\x7f\xf2\xab\xa4\x45\xa9\x8c\x14\xb6\x9f\xff\x2e\x5d\x76\xa9\xc2\x19\x15\x0f\x86\xcf\x49\xca\x5f\x52\xfc\x1b\x9d\x28\x2c\x22\xa1\x9b\x1b\x55\x45\xce\xa8\x51\x68\x3b\x04\x62\xe0\x8c\x62\xbf\x03\x00\x00\xff\xff\x70\x7b\xae\xe4\x8f\x02\x00\x00")

func dataTutorialShow_usageBytes() ([]byte, error) {
	return bindataRead(
		_dataTutorialShow_usage,
		"data/tutorial/show_usage",
	)
}

func dataTutorialShow_usage() (*asset, error) {
	bytes, err := dataTutorialShow_usageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tutorial/show_usage", size: 655, mode: os.FileMode(420), modTime: time.Unix(1477516100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/tutorial/docker_host_ip_docker_machine": dataTutorialDocker_host_ip_docker_machine,
	"data/tutorial/docker_host_ip_dockermac": dataTutorialDocker_host_ip_dockermac,
	"data/tutorial/docker_run_5000": dataTutorialDocker_run_5000,
	"data/tutorial/get_started": dataTutorialGet_started,
	"data/tutorial/postgres_uri": dataTutorialPostgres_uri,
	"data/tutorial/show_usage": dataTutorialShow_usage,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"tutorial": &bintree{nil, map[string]*bintree{
			"docker_host_ip_docker_machine": &bintree{dataTutorialDocker_host_ip_docker_machine, map[string]*bintree{}},
			"docker_host_ip_dockermac": &bintree{dataTutorialDocker_host_ip_dockermac, map[string]*bintree{}},
			"docker_run_5000": &bintree{dataTutorialDocker_run_5000, map[string]*bintree{}},
			"get_started": &bintree{dataTutorialGet_started, map[string]*bintree{}},
			"postgres_uri": &bintree{dataTutorialPostgres_uri, map[string]*bintree{}},
			"show_usage": &bintree{dataTutorialShow_usage, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

